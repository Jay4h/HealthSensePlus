{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# HealthSensePlus Healthcare Management System\n\n## Overview\n\nHealthSensePlus is a comprehensive healthcare management system built with modern web technologies. It's a full-stack application that provides role-based access control for patients, doctors, nurses, and administrators. The system handles appointment scheduling, medical records management, health metrics tracking, and communication between healthcare providers and patients.\n\nThe application uses a monorepo structure with separate client and server directories, shared schema definitions, and a PostgreSQL database with Drizzle ORM for type-safe database operations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state management with custom query client configuration\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom healthcare-themed color variables and CSS custom properties\n- **Form Handling**: React Hook Form with Zod validation resolvers\n- **Authentication**: JWT-based authentication with role-based route protection\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: JWT tokens with bcryptjs for password hashing\n- **API Structure**: RESTful endpoints with role-based authorization middleware\n- **Session Management**: Express sessions with PostgreSQL session store\n- **Error Handling**: Centralized error handling middleware with proper HTTP status codes\n\n### Database Design\n- **ORM**: Drizzle ORM with PostgreSQL dialect for type-safe database operations\n- **Schema**: Centralized schema definitions in shared directory with Zod validation\n- **Tables**: Users, appointments, medical records, health metrics, contact messages, and feedback\n- **Relationships**: Foreign key relationships between users, appointments, and medical records\n- **Validation**: Runtime validation using Drizzle-Zod integration\n\n### Authentication & Authorization\n- **Multi-role System**: Patient, Doctor, Admin, and Nurse roles with different access levels\n- **JWT Implementation**: Token-based authentication with configurable secret key\n- **Route Protection**: Protected routes component that checks user roles before allowing access\n- **Password Security**: bcryptjs hashing with salt rounds for secure password storage\n\n### Development Setup\n- **Build System**: Vite for frontend development with React plugin and error overlay\n- **TypeScript**: Strict TypeScript configuration with path mapping for clean imports\n- **Code Quality**: ESLint and Prettier configuration for consistent code formatting\n- **Development Tools**: Hot module replacement, runtime error overlay, and development banners\n\n## External Dependencies\n\n### Database & Storage\n- **PostgreSQL**: Primary database using Neon Database serverless PostgreSQL\n- **Drizzle ORM**: Type-safe database operations with automatic migration generation\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n### Frontend Libraries\n- **React Ecosystem**: React 18, React DOM, React Hook Form for form management\n- **UI Framework**: Radix UI primitives for accessible component foundation\n- **Styling**: Tailwind CSS with PostCSS for utility-first styling approach\n- **State Management**: TanStack React Query for server state and caching\n- **Validation**: Zod for runtime type validation and schema definition\n- **Date Handling**: date-fns for date manipulation and formatting utilities\n\n### Backend Dependencies\n- **Express.js**: Web framework with middleware for routing and request handling\n- **Security**: bcryptjs for password hashing, JWT for token authentication\n- **Development**: tsx for TypeScript execution, esbuild for production builds\n- **Validation**: Zod for API request/response validation and type safety\n\n### Development Tools\n- **Vite**: Frontend build tool with React plugin and development server\n- **TypeScript**: Type checking and compilation for both frontend and backend\n- **Replit Integration**: Custom Vite plugins for Replit development environment\n- **Build Tools**: esbuild for backend bundling, PostCSS for CSS processing","size_bytes":4442},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport { insertUserSchema, insertAppointmentSchema, insertMedicalRecordSchema, insertHealthMetricsSchema, insertContactMessageSchema, insertFeedbackSchema } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"healthcare-secret-key\";\n\n// Middleware to verify JWT token\nconst authenticateToken = (req: any, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) return res.status(403).json({ message: 'Invalid token' });\n    req.user = user;\n    next();\n  });\n};\n\n// Middleware to check user role\nconst authorizeRole = (roles: string[]) => {\n  return (req: any, res: any, next: any) => {\n    if (!req.user || !roles.includes(req.user.role)) {\n      return res.status(403).json({ message: 'Insufficient permissions' });\n    }\n    next();\n  };\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Authentication Routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      \n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword\n      });\n\n      // Remove password from response\n      const { password, ...userResponse } = user;\n      \n      res.status(201).json({ user: userResponse });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\", error });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign(\n        { userId: user.id, email: user.email, role: user.role },\n        JWT_SECRET,\n        { expiresIn: '24h' }\n      );\n\n      const { password: _, ...userResponse } = user;\n      \n      res.json({ token, user: userResponse });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\", error });\n    }\n  });\n\n  // User Routes\n  app.get(\"/api/users/profile\", authenticateToken, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password, ...userResponse } = user;\n      res.json(userResponse);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get profile\", error });\n    }\n  });\n\n  app.put(\"/api/users/profile\", authenticateToken, async (req: any, res) => {\n    try {\n      const updates = req.body;\n      delete updates.password; // Don't allow password updates through this route\n      \n      const user = await storage.updateUser(req.user.userId, updates);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password, ...userResponse } = user;\n      res.json(userResponse);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update profile\", error });\n    }\n  });\n\n  app.get(\"/api/users\", authenticateToken, authorizeRole(['admin']), async (req, res) => {\n    try {\n      const { role } = req.query;\n      let users;\n      \n      if (role) {\n        users = await storage.getUsersByRole(role as string);\n      } else {\n        users = await storage.getAllUsers();\n      }\n      \n      // Remove passwords from response\n      const usersResponse = users.map(({ password, ...user }) => user);\n      res.json(usersResponse);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get users\", error });\n    }\n  });\n\n  // Appointment Routes\n  app.get(\"/api/appointments\", authenticateToken, async (req: any, res) => {\n    try {\n      let appointments;\n      \n      if (req.user.role === 'patient') {\n        appointments = await storage.getAppointmentsByPatient(req.user.userId);\n      } else if (req.user.role === 'doctor') {\n        appointments = await storage.getAppointmentsByDoctor(req.user.userId);\n      } else if (req.user.role === 'admin' || req.user.role === 'nurse') {\n        appointments = await storage.getAllAppointments();\n      } else {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(appointments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get appointments\", error });\n    }\n  });\n\n  app.post(\"/api/appointments\", authenticateToken, async (req: any, res) => {\n    try {\n      let appointmentData = insertAppointmentSchema.parse(req.body);\n      \n      // If user is patient, set patientId to their own ID\n      if (req.user.role === 'patient') {\n        appointmentData.patientId = req.user.userId;\n      }\n      \n      const appointment = await storage.createAppointment(appointmentData);\n      res.status(201).json(appointment);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid appointment data\", error });\n    }\n  });\n\n  app.put(\"/api/appointments/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const appointment = await storage.updateAppointment(id, updates);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      \n      res.json(appointment);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update appointment\", error });\n    }\n  });\n\n  // Available time slots (mock implementation)\n  app.get(\"/api/appointments/available-slots\", authenticateToken, async (req, res) => {\n    try {\n      const { doctorId, date } = req.query;\n      \n      // Get existing appointments for the doctor on that date\n      const existingAppointments = await storage.getAppointmentsByDate(date as string);\n      const doctorAppointments = existingAppointments.filter(apt => apt.doctorId === doctorId);\n      \n      // Generate available slots (9 AM to 5 PM, excluding booked ones)\n      const allSlots = [\n        \"09:00\", \"09:30\", \"10:00\", \"10:30\", \"11:00\", \"11:30\",\n        \"14:00\", \"14:30\", \"15:00\", \"15:30\", \"16:00\", \"16:30\"\n      ];\n      \n      const bookedSlots = doctorAppointments.map(apt => apt.timeSlot);\n      const availableSlots = allSlots.filter(slot => !bookedSlots.includes(slot));\n      \n      res.json(availableSlots);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get available slots\", error });\n    }\n  });\n\n  // Medical Records Routes\n  app.get(\"/api/medical-records\", authenticateToken, async (req: any, res) => {\n    try {\n      let records;\n      \n      if (req.user.role === 'patient') {\n        records = await storage.getMedicalRecordsByPatient(req.user.userId);\n      } else if (req.user.role === 'doctor') {\n        const { patientId } = req.query;\n        if (patientId) {\n          records = await storage.getMedicalRecordsByPatient(patientId as string);\n        } else {\n          records = await storage.getMedicalRecordsByDoctor(req.user.userId);\n        }\n      } else if (req.user.role === 'admin' || req.user.role === 'nurse') {\n        const { patientId } = req.query;\n        if (patientId) {\n          records = await storage.getMedicalRecordsByPatient(patientId as string);\n        } else {\n          // Return all records for admin/nurse would be too much, require patientId\n          return res.status(400).json({ message: \"patientId parameter required\" });\n        }\n      }\n      \n      res.json(records);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get medical records\", error });\n    }\n  });\n\n  app.post(\"/api/medical-records\", authenticateToken, authorizeRole(['doctor', 'nurse']), async (req: any, res) => {\n    try {\n      const recordData = insertMedicalRecordSchema.parse(req.body);\n      \n      // Set doctorId to current user if they're a doctor\n      if (req.user.role === 'doctor') {\n        recordData.doctorId = req.user.userId;\n      }\n      \n      const record = await storage.createMedicalRecord(recordData);\n      res.status(201).json(record);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid medical record data\", error });\n    }\n  });\n\n  app.put(\"/api/medical-records/:id\", authenticateToken, authorizeRole(['doctor', 'nurse']), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const record = await storage.updateMedicalRecord(id, updates);\n      if (!record) {\n        return res.status(404).json({ message: \"Medical record not found\" });\n      }\n      \n      res.json(record);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update medical record\", error });\n    }\n  });\n\n  // Health Metrics Routes\n  app.get(\"/api/health-metrics\", authenticateToken, async (req: any, res) => {\n    try {\n      const { patientId } = req.query;\n      let targetPatientId = patientId as string;\n      \n      // If user is patient, only allow access to their own metrics\n      if (req.user.role === 'patient') {\n        targetPatientId = req.user.userId;\n      }\n      \n      if (!targetPatientId) {\n        return res.status(400).json({ message: \"patientId parameter required\" });\n      }\n      \n      const metrics = await storage.getHealthMetricsByPatient(targetPatientId);\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get health metrics\", error });\n    }\n  });\n\n  app.post(\"/api/health-metrics\", authenticateToken, async (req: any, res) => {\n    try {\n      let metricsData = insertHealthMetricsSchema.parse(req.body);\n      \n      // If user is patient, set patientId to their own ID\n      if (req.user.role === 'patient') {\n        metricsData.patientId = req.user.userId;\n      }\n      \n      const metrics = await storage.createHealthMetrics(metricsData);\n      res.status(201).json(metrics);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid health metrics data\", error });\n    }\n  });\n\n  // Contact Messages Routes\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const messageData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(messageData);\n      res.status(201).json(message);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid contact message data\", error });\n    }\n  });\n\n  app.get(\"/api/contact\", authenticateToken, authorizeRole(['admin']), async (req, res) => {\n    try {\n      const messages = await storage.getAllContactMessages();\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get contact messages\", error });\n    }\n  });\n\n  // Feedback Routes\n  app.post(\"/api/feedback\", authenticateToken, async (req: any, res) => {\n    try {\n      const feedbackData = insertFeedbackSchema.parse({\n        ...req.body,\n        userId: req.user.userId\n      });\n      \n      const feedback = await storage.createFeedback(feedbackData);\n      res.status(201).json(feedback);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid feedback data\", error });\n    }\n  });\n\n  app.get(\"/api/feedback\", authenticateToken, authorizeRole(['admin']), async (req, res) => {\n    try {\n      const feedback = await storage.getAllFeedback();\n      res.json(feedback);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get feedback\", error });\n    }\n  });\n\n  // Dashboard Analytics Routes\n  app.get(\"/api/analytics/dashboard-stats\", authenticateToken, async (req: any, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      const appointments = await storage.getAllAppointments();\n      const today = new Date().toISOString().split('T')[0];\n      const todayAppointments = await storage.getAppointmentsByDate(today);\n      \n      const stats = {\n        totalUsers: users.length,\n        totalPatients: users.filter(u => u.role === 'patient').length,\n        totalDoctors: users.filter(u => u.role === 'doctor').length,\n        totalAppointments: appointments.length,\n        todayAppointments: todayAppointments.length,\n        activeUsers: users.filter(u => u.isActive).length,\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get dashboard stats\", error });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13263},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Appointment, \n  type InsertAppointment,\n  type MedicalRecord,\n  type InsertMedicalRecord,\n  type HealthMetrics,\n  type InsertHealthMetrics,\n  type ContactMessage,\n  type InsertContactMessage,\n  type Feedback,\n  type InsertFeedback\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n  getUsersByRole(role: string): Promise<User[]>;\n  getAllUsers(): Promise<User[]>;\n\n  // Appointment operations\n  getAppointment(id: string): Promise<Appointment | undefined>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: string, updates: Partial<InsertAppointment>): Promise<Appointment | undefined>;\n  getAppointmentsByPatient(patientId: string): Promise<Appointment[]>;\n  getAppointmentsByDoctor(doctorId: string): Promise<Appointment[]>;\n  getAppointmentsByDate(date: string): Promise<Appointment[]>;\n  getAllAppointments(): Promise<Appointment[]>;\n\n  // Medical Record operations\n  getMedicalRecord(id: string): Promise<MedicalRecord | undefined>;\n  createMedicalRecord(record: InsertMedicalRecord): Promise<MedicalRecord>;\n  updateMedicalRecord(id: string, updates: Partial<InsertMedicalRecord>): Promise<MedicalRecord | undefined>;\n  getMedicalRecordsByPatient(patientId: string): Promise<MedicalRecord[]>;\n  getMedicalRecordsByDoctor(doctorId: string): Promise<MedicalRecord[]>;\n\n  // Health Metrics operations\n  getHealthMetrics(id: string): Promise<HealthMetrics | undefined>;\n  createHealthMetrics(metrics: InsertHealthMetrics): Promise<HealthMetrics>;\n  getHealthMetricsByPatient(patientId: string): Promise<HealthMetrics[]>;\n\n  // Contact Message operations\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  getAllContactMessages(): Promise<ContactMessage[]>;\n  updateContactMessageStatus(id: string, status: string): Promise<ContactMessage | undefined>;\n\n  // Feedback operations\n  createFeedback(feedback: InsertFeedback): Promise<Feedback>;\n  getAllFeedback(): Promise<Feedback[]>;\n  getFeedbackByUser(userId: string): Promise<Feedback[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private appointments: Map<string, Appointment>;\n  private medicalRecords: Map<string, MedicalRecord>;\n  private healthMetrics: Map<string, HealthMetrics>;\n  private contactMessages: Map<string, ContactMessage>;\n  private feedbacks: Map<string, Feedback>;\n\n  constructor() {\n    this.users = new Map();\n    this.appointments = new Map();\n    this.medicalRecords = new Map();\n    this.healthMetrics = new Map();\n    this.contactMessages = new Map();\n    this.feedbacks = new Map();\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const now = new Date();\n    const user: User = { \n      ...insertUser, \n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser: User = { \n      ...user, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return Array.from(this.users.values()).filter(user => user.role === role);\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  // Appointment operations\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    return this.appointments.get(id);\n  }\n\n  async createAppointment(insertAppointment: InsertAppointment): Promise<Appointment> {\n    const id = randomUUID();\n    const now = new Date();\n    const appointment: Appointment = { \n      ...insertAppointment, \n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.appointments.set(id, appointment);\n    return appointment;\n  }\n\n  async updateAppointment(id: string, updates: Partial<InsertAppointment>): Promise<Appointment | undefined> {\n    const appointment = this.appointments.get(id);\n    if (!appointment) return undefined;\n    \n    const updatedAppointment: Appointment = { \n      ...appointment, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.appointments.set(id, updatedAppointment);\n    return updatedAppointment;\n  }\n\n  async getAppointmentsByPatient(patientId: string): Promise<Appointment[]> {\n    return Array.from(this.appointments.values()).filter(apt => apt.patientId === patientId);\n  }\n\n  async getAppointmentsByDoctor(doctorId: string): Promise<Appointment[]> {\n    return Array.from(this.appointments.values()).filter(apt => apt.doctorId === doctorId);\n  }\n\n  async getAppointmentsByDate(date: string): Promise<Appointment[]> {\n    return Array.from(this.appointments.values()).filter(apt => apt.appointmentDate === date);\n  }\n\n  async getAllAppointments(): Promise<Appointment[]> {\n    return Array.from(this.appointments.values());\n  }\n\n  // Medical Record operations\n  async getMedicalRecord(id: string): Promise<MedicalRecord | undefined> {\n    return this.medicalRecords.get(id);\n  }\n\n  async createMedicalRecord(insertRecord: InsertMedicalRecord): Promise<MedicalRecord> {\n    const id = randomUUID();\n    const now = new Date();\n    const record: MedicalRecord = { \n      ...insertRecord, \n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.medicalRecords.set(id, record);\n    return record;\n  }\n\n  async updateMedicalRecord(id: string, updates: Partial<InsertMedicalRecord>): Promise<MedicalRecord | undefined> {\n    const record = this.medicalRecords.get(id);\n    if (!record) return undefined;\n    \n    const updatedRecord: MedicalRecord = { \n      ...record, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.medicalRecords.set(id, updatedRecord);\n    return updatedRecord;\n  }\n\n  async getMedicalRecordsByPatient(patientId: string): Promise<MedicalRecord[]> {\n    return Array.from(this.medicalRecords.values()).filter(record => record.patientId === patientId);\n  }\n\n  async getMedicalRecordsByDoctor(doctorId: string): Promise<MedicalRecord[]> {\n    return Array.from(this.medicalRecords.values()).filter(record => record.doctorId === doctorId);\n  }\n\n  // Health Metrics operations\n  async getHealthMetrics(id: string): Promise<HealthMetrics | undefined> {\n    return this.healthMetrics.get(id);\n  }\n\n  async createHealthMetrics(insertMetrics: InsertHealthMetrics): Promise<HealthMetrics> {\n    const id = randomUUID();\n    const metrics: HealthMetrics = { \n      ...insertMetrics, \n      id,\n      createdAt: new Date()\n    };\n    this.healthMetrics.set(id, metrics);\n    return metrics;\n  }\n\n  async getHealthMetricsByPatient(patientId: string): Promise<HealthMetrics[]> {\n    return Array.from(this.healthMetrics.values()).filter(metrics => metrics.patientId === patientId);\n  }\n\n  // Contact Message operations\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const id = randomUUID();\n    const message: ContactMessage = { \n      ...insertMessage, \n      id,\n      createdAt: new Date()\n    };\n    this.contactMessages.set(id, message);\n    return message;\n  }\n\n  async getAllContactMessages(): Promise<ContactMessage[]> {\n    return Array.from(this.contactMessages.values());\n  }\n\n  async updateContactMessageStatus(id: string, status: string): Promise<ContactMessage | undefined> {\n    const message = this.contactMessages.get(id);\n    if (!message) return undefined;\n    \n    const updatedMessage: ContactMessage = { \n      ...message, \n      status \n    };\n    this.contactMessages.set(id, updatedMessage);\n    return updatedMessage;\n  }\n\n  // Feedback operations\n  async createFeedback(insertFeedback: InsertFeedback): Promise<Feedback> {\n    const id = randomUUID();\n    const feedback: Feedback = { \n      ...insertFeedback, \n      id,\n      createdAt: new Date()\n    };\n    this.feedbacks.set(id, feedback);\n    return feedback;\n  }\n\n  async getAllFeedback(): Promise<Feedback[]> {\n    return Array.from(this.feedbacks.values());\n  }\n\n  async getFeedbackByUser(userId: string): Promise<Feedback[]> {\n    return Array.from(this.feedbacks.values()).filter(feedback => feedback.userId === userId);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":8903},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull(), // 'patient', 'doctor', 'admin', 'nurse'\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  phone: text(\"phone\"),\n  dateOfBirth: text(\"date_of_birth\"),\n  gender: text(\"gender\"),\n  address: jsonb(\"address\"),\n  profileImage: text(\"profile_image\"),\n  isActive: boolean(\"is_active\").default(true),\n  specialization: text(\"specialization\"), // for doctors\n  licenseNumber: text(\"license_number\"), // for doctors\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => users.id).notNull(),\n  doctorId: varchar(\"doctor_id\").references(() => users.id).notNull(),\n  appointmentDate: text(\"appointment_date\").notNull(),\n  timeSlot: text(\"time_slot\").notNull(),\n  status: text(\"status\").notNull().default(\"scheduled\"), // 'scheduled', 'completed', 'cancelled', 'rescheduled'\n  reason: text(\"reason\"),\n  notes: text(\"notes\"),\n  insuranceProvider: text(\"insurance_provider\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const medicalRecords = pgTable(\"medical_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => users.id).notNull(),\n  doctorId: varchar(\"doctor_id\").references(() => users.id).notNull(),\n  appointmentId: varchar(\"appointment_id\").references(() => appointments.id),\n  visitDate: text(\"visit_date\").notNull(),\n  diagnosis: text(\"diagnosis\"),\n  treatment: text(\"treatment\"),\n  prescription: jsonb(\"prescription\"),\n  labResults: jsonb(\"lab_results\"),\n  vitals: jsonb(\"vitals\"),\n  notes: text(\"notes\"),\n  attachments: jsonb(\"attachments\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const healthMetrics = pgTable(\"health_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => users.id).notNull(),\n  bloodPressure: text(\"blood_pressure\"),\n  heartRate: integer(\"heart_rate\"),\n  weight: text(\"weight\"),\n  temperature: text(\"temperature\"),\n  height: text(\"height\"),\n  bloodType: text(\"blood_type\"),\n  allergies: jsonb(\"allergies\"),\n  emergencyContact: jsonb(\"emergency_contact\"),\n  recordedDate: text(\"recorded_date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").default(\"new\"), // 'new', 'read', 'responded'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const feedback = pgTable(\"feedback\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  rating: integer(\"rating\").notNull(),\n  comment: text(\"comment\"),\n  category: text(\"category\"), // 'service', 'system', 'doctor', 'general'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMedicalRecordSchema = createInsertSchema(medicalRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertHealthMetricsSchema = createInsertSchema(healthMetrics).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFeedbackSchema = createInsertSchema(feedback).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\n\nexport type InsertMedicalRecord = z.infer<typeof insertMedicalRecordSchema>;\nexport type MedicalRecord = typeof medicalRecords.$inferSelect;\n\nexport type InsertHealthMetrics = z.infer<typeof insertHealthMetricsSchema>;\nexport type HealthMetrics = typeof healthMetrics.$inferSelect;\n\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\n\nexport type InsertFeedback = z.infer<typeof insertFeedbackSchema>;\nexport type Feedback = typeof feedback.$inferSelect;\n","size_bytes":5331},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport PatientDashboard from \"@/pages/patient-dashboard\";\nimport DoctorDashboard from \"@/pages/doctor-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport NurseDashboard from \"@/pages/nurse-dashboard\";\nimport AppointmentBooking from \"@/pages/appointment-booking\";\nimport MedicalRecords from \"@/pages/medical-records\";\nimport Contact from \"@/pages/contact\";\nimport ProtectedRoute from \"@/components/protected-route\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/contact\" component={Contact} />\n      \n      {/* Protected Routes */}\n      <Route path=\"/dashboard/patient\">\n        <ProtectedRoute allowedRoles={['patient']}>\n          <PatientDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/dashboard/doctor\">\n        <ProtectedRoute allowedRoles={['doctor']}>\n          <DoctorDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/dashboard/admin\">\n        <ProtectedRoute allowedRoles={['admin']}>\n          <AdminDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/dashboard/nurse\">\n        <ProtectedRoute allowedRoles={['nurse']}>\n          <NurseDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/appointments\">\n        <ProtectedRoute allowedRoles={['patient', 'doctor', 'admin', 'nurse']}>\n          <AppointmentBooking />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/medical-records\">\n        <ProtectedRoute allowedRoles={['patient', 'doctor', 'admin', 'nurse']}>\n          <MedicalRecords />\n        </ProtectedRoute>\n      </Route>\n\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2501},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(213, 83%, 50%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n\n  /* Healthcare Theme Colors */\n  --medical-blue: hsl(213, 83%, 50%);\n  --medical-blue-50: hsl(214, 100%, 97%);\n  --medical-blue-100: hsl(214, 95%, 93%);\n  --medical-blue-500: hsl(213, 83%, 50%);\n  --medical-blue-600: hsl(213, 83%, 45%);\n  --medical-blue-700: hsl(213, 75%, 40%);\n  \n  --healing-green: hsl(158, 94%, 40%);\n  --healing-green-50: hsl(151, 81%, 96%);\n  --healing-green-100: hsl(149, 80%, 90%);\n  --healing-green-500: hsl(158, 94%, 40%);\n  --healing-green-600: hsl(158, 94%, 35%);\n  --healing-green-700: hsl(158, 94%, 30%);\n  \n  --healthcare-orange: hsl(43, 96%, 56%);\n  --healthcare-orange-50: hsl(48, 100%, 93%);\n  --healthcare-orange-100: hsl(48, 96%, 89%);\n  --healthcare-orange-400: hsl(43, 96%, 66%);\n  --healthcare-orange-500: hsl(43, 96%, 56%);\n  --healthcare-orange-600: hsl(36, 95%, 50%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(213, 83%, 50%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom 3D Button Animation */\n.container-button {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 1fr 1fr;\n  grid-template-areas: \"bt-1 bt-2 bt-3\" \"bt-4 bt-5 bt-6\";\n  position: relative;\n  perspective: 800px;\n  padding: 0;\n  width: 140px;\n  height: 50px;\n  transition: all 0.3s ease-in-out;\n}\n\n.container-button:active {\n  transform: scale(0.95);\n}\n\n.hover {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  z-index: 200;\n}\n\n.bt-1 { grid-area: bt-1; }\n.bt-2 { grid-area: bt-2; }\n.bt-3 { grid-area: bt-3; }\n.bt-4 { grid-area: bt-4; }\n.bt-5 { grid-area: bt-5; }\n.bt-6 { grid-area: bt-6; }\n\n.bt-1:hover ~ .animated-button {\n  transform: rotateX(15deg) rotateY(-15deg) rotateZ(0deg);\n  box-shadow: -2px -2px hsl(20, 14.3%, 4.1%, 0.5);\n}\n\n.bt-1:hover ~ .animated-button::after {\n  animation: shake 0.5s ease-in-out 0.3s;\n  text-shadow: -2px -2px hsl(20, 14.3%, 4.1%, 0.5);\n}\n\n.bt-3:hover ~ .animated-button {\n  transform: rotateX(15deg) rotateY(15deg) rotateZ(0deg);\n  box-shadow: 2px -2px hsl(20, 14.3%, 4.1%, 0.5);\n}\n\n.bt-3:hover ~ .animated-button::after {\n  animation: shake 0.5s ease-in-out 0.3s;\n  text-shadow: 2px -2px hsl(20, 14.3%, 4.1%, 0.5);\n}\n\n.bt-4:hover ~ .animated-button {\n  transform: rotateX(-15deg) rotateY(-15deg) rotateZ(0deg);\n  box-shadow: -2px 2px hsl(20, 14.3%, 4.1%, 0.5);\n}\n\n.bt-4:hover ~ .animated-button::after {\n  animation: shake 0.5s ease-in-out 0.3s;\n  text-shadow: -2px 2px hsl(20, 14.3%, 4.1%, 0.5);\n}\n\n.bt-6:hover ~ .animated-button {\n  transform: rotateX(-15deg) rotateY(15deg) rotateZ(0deg);\n  box-shadow: 2px 2px hsl(20, 14.3%, 4.1%, 0.5);\n}\n\n.bt-6:hover ~ .animated-button::after {\n  animation: shake 0.5s ease-in-out 0.3s;\n  text-shadow: 2px 2px hsl(20, 14.3%, 4.1%, 0.5);\n}\n\n.hover:hover ~ .animated-button::before {\n  background: transparent;\n}\n\n.hover:hover ~ .animated-button::after {\n  content: \"Login\";\n  top: -150%;\n  transform: translate(-50%, 0);\n  font-size: 24px;\n  color: hsl(213, 83%, 50%);\n}\n\n.animated-button {\n  position: absolute;\n  padding: 0;\n  width: 140px;\n  height: 50px;\n  background: transparent;\n  font-size: 16px;\n  font-weight: 600;\n  border: 3px solid hsl(213, 83%, 50%);\n  border-radius: 12px;\n  transition: all 0.3s ease-in-out;\n  cursor: pointer;\n}\n\n.animated-button::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 140px;\n  height: 50px;\n  background-color: hsl(213, 83%, 50%);\n  border-radius: 12px;\n  transition: all 0.3s ease-in-out;\n  z-index: -1;\n}\n\n.animated-button::after {\n  content: \"Get Started\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 140px;\n  height: 50px;\n  background-color: transparent;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 50px;\n  color: hsl(0, 0%, 100%);\n  border: none;\n  border-radius: 12px;\n  transition: all 0.3s ease-in-out;\n  z-index: 2;\n}\n\n@keyframes shake {\n  0% { left: 45%; }\n  25% { left: 54%; }\n  50% { left: 48%; }\n  75% { left: 52%; }\n  100% { left: 50%; }\n}\n\n/* Healthcare specific cards */\n.dashboard-card {\n  background: linear-gradient(135deg, hsl(60, 4.8%, 95.9%) 0%, hsl(240, 3.7%, 15.9%) 100%);\n  border-left: 4px solid hsl(213, 83%, 50%);\n}\n\n.stat-card {\n  background: linear-gradient(135deg, hsl(0, 0%, 100%) 0%, hsl(60, 4.8%, 95.9%) 100%);\n  box-shadow: 0 4px 6px -1px hsla(0, 0%, 0%, 0.1);\n}\n\n.appointment-card {\n  background: linear-gradient(135deg, hsl(214, 100%, 97%) 0%, hsl(214, 95%, 93%) 100%);\n  border-left: 4px solid hsl(158, 94%, 40%);\n}\n\n.medical-record-card {\n  background: linear-gradient(135deg, hsl(48, 100%, 93%) 0%, hsl(48, 96%, 89%) 100%);\n  border-left: 4px solid hsl(43, 96%, 56%);\n}\n","size_bytes":6185},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/animated-button.jsx":{"content":"export default function AnimatedButton({ onClick, children = \"Get Started\" }) {\n  return (\n    <div className=\"container-button\">\n      <div className=\"hover\"></div>\n      <div className=\"bt-1\"></div>\n      <div className=\"bt-2\"></div>\n      <div className=\"bt-3\"></div>\n      <div className=\"bt-4\"></div>\n      <div className=\"bt-5\"></div>\n      <div className=\"bt-6\"></div>\n      <button className=\"animated-button\" onClick={onClick}>\n        {children}\n      </button>\n    </div>\n  );\n}\n","size_bytes":490},"client/src/components/appointment-card.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { UserCheck, Calendar, Clock } from \"lucide-react\";\n\nexport default function AppointmentCard({ appointment }) {\n  const { data: doctor } = useQuery({\n    queryKey: [\"/api/users\", appointment.doctorId],\n    enabled: !!appointment.doctorId,\n  });\n\n  const getStatusColor = (status) => {\n    const statusColors = {\n      scheduled: \"bg-blue-100 text-blue-800\",\n      completed: \"bg-green-100 text-green-800\",\n      cancelled: \"bg-red-100 text-red-800\",\n      rescheduled: \"bg-yellow-100 text-yellow-800\",\n    };\n    return statusColors[status] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { \n      weekday: 'short',\n      year: 'numeric', \n      month: 'short', \n      day: 'numeric' \n    });\n  };\n\n  const formatTime = (timeString) => {\n    return timeString || \"Time not set\";\n  };\n\n  return (\n    <div className=\"appointment-card rounded-lg p-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center\">\n          <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n            <UserCheck className=\"h-5 w-5 text-blue-600\" />\n          </div>\n          <div className=\"ml-4\">\n            <h4 className=\"font-medium text-gray-900\">\n              {doctor ? `Dr. ${doctor.lastName}` : \"Loading...\"}\n            </h4>\n            <p className=\"text-sm text-gray-600\">\n              {doctor?.specialization || appointment.reason || \"General Consultation\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"flex items-center text-sm font-medium text-gray-900 mb-1\">\n            <Calendar className=\"h-4 w-4 mr-1\" />\n            {formatDate(appointment.appointmentDate)}\n          </div>\n          <div className=\"flex items-center text-sm text-gray-600\">\n            <Clock className=\"h-4 w-4 mr-1\" />\n            {formatTime(appointment.timeSlot)}\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"mt-4 flex items-center justify-between\">\n        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(appointment.status)}`}>\n          {appointment.status.charAt(0).toUpperCase() + appointment.status.slice(1)}\n        </span>\n        <div className=\"flex space-x-2\">\n          {appointment.status === \"scheduled\" && (\n            <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">\n              Reschedule\n            </Button>\n          )}\n          <Button size=\"sm\" variant=\"outline\" className=\"text-blue-600 hover:text-blue-700 text-xs\">\n            View Details\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2873},"client/src/components/medical-record-card.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, User, Calendar, Stethoscope } from \"lucide-react\";\n\nexport default function MedicalRecordCard({ record }) {\n  const { data: doctor } = useQuery({\n    queryKey: [\"/api/users\", record.doctorId],\n    enabled: !!record.doctorId,\n  });\n\n  const { data: patient } = useQuery({\n    queryKey: [\"/api/users\", record.patientId], \n    enabled: !!record.patientId,\n  });\n\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric' \n    });\n  };\n\n  return (\n    <div className=\"medical-record-card rounded-lg p-4\">\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center mb-2\">\n            <Calendar className=\"h-4 w-4 text-gray-500 mr-2\" />\n            <h4 className=\"font-medium text-gray-900\">{formatDate(record.visitDate)}</h4>\n            <Badge variant=\"outline\" className=\"ml-2\">\n              Completed\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center mb-2\">\n            <Stethoscope className=\"h-4 w-4 text-gray-500 mr-2\" />\n            <p className=\"text-sm text-gray-600\">\n              {doctor ? `Dr. ${doctor.lastName}` : \"Loading...\"} - {doctor?.specialization || \"General Practice\"}\n            </p>\n          </div>\n\n          {patient && (\n            <div className=\"flex items-center mb-2\">\n              <User className=\"h-4 w-4 text-gray-500 mr-2\" />\n              <p className=\"text-sm text-gray-600\">\n                Patient: {patient.firstName} {patient.lastName}\n              </p>\n            </div>\n          )}\n          \n          <div className=\"mt-3\">\n            <p className=\"text-sm font-medium text-gray-900 mb-1\">Diagnosis:</p>\n            <p className=\"text-sm text-gray-700\">{record.diagnosis}</p>\n          </div>\n\n          {record.treatment && (\n            <div className=\"mt-2\">\n              <p className=\"text-sm font-medium text-gray-900 mb-1\">Treatment:</p>\n              <p className=\"text-sm text-gray-700\">{record.treatment}</p>\n            </div>\n          )}\n\n          {record.notes && (\n            <div className=\"mt-2\">\n              <p className=\"text-sm font-medium text-gray-900 mb-1\">Notes:</p>\n              <p className=\"text-sm text-gray-700\">{record.notes}</p>\n            </div>\n          )}\n\n          {record.vitals && Object.keys(record.vitals).length > 0 && (\n            <div className=\"mt-3\">\n              <p className=\"text-sm font-medium text-gray-900 mb-2\">Vitals:</p>\n              <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                {record.vitals.bloodPressure && (\n                  <div className=\"bg-gray-50 rounded px-2 py-1\">\n                    <span className=\"font-medium\">BP:</span> {record.vitals.bloodPressure}\n                  </div>\n                )}\n                {record.vitals.heartRate && (\n                  <div className=\"bg-gray-50 rounded px-2 py-1\">\n                    <span className=\"font-medium\">HR:</span> {record.vitals.heartRate} bpm\n                  </div>\n                )}\n                {record.vitals.temperature && (\n                  <div className=\"bg-gray-50 rounded px-2 py-1\">\n                    <span className=\"font-medium\">Temp:</span> {record.vitals.temperature}°F\n                  </div>\n                )}\n                {record.vitals.weight && (\n                  <div className=\"bg-gray-50 rounded px-2 py-1\">\n                    <span className=\"font-medium\">Weight:</span> {record.vitals.weight}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"ml-4\">\n          <Button size=\"sm\" variant=\"outline\" className=\"text-blue-600 hover:text-blue-700\">\n            <FileText className=\"h-4 w-4 mr-1\" />\n            View Full Record\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4147},"client/src/components/navbar.jsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Heart, Menu, X, User, LogOut, Bell } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function Navbar() {\n  const [, setLocation] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { user, logout } = useAuth();\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/\");\n  };\n\n  const getDashboardLink = () => {\n    if (!user) return \"/\";\n    return `/dashboard/${user.role}`;\n  };\n\n  const navigationItems = [\n    { name: \"Home\", href: \"/\", show: true },\n    { name: \"Dashboard\", href: getDashboardLink(), show: !!user },\n    { name: \"Appointments\", href: \"/appointments\", show: !!user },\n    { name: \"Medical Records\", href: \"/medical-records\", show: !!user },\n    { name: \"Contact\", href: \"/contact\", show: true },\n  ];\n\n  return (\n    <nav className=\"bg-white shadow-lg border-b border-gray-200 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center cursor-pointer\" onClick={() => setLocation(\"/\")}>\n            <Heart className=\"h-8 w-8 text-blue-600 mr-2\" />\n            <span className=\"text-xl font-bold text-gray-900\">HealthSensePlus</span>\n          </div>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:block\">\n            <div className=\"ml-10 flex items-baseline space-x-4\">\n              {navigationItems\n                .filter(item => item.show)\n                .map((item) => (\n                  <button\n                    key={item.name}\n                    onClick={() => setLocation(item.href)}\n                    className=\"text-gray-600 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors\"\n                  >\n                    {item.name}\n                  </button>\n                ))}\n            </div>\n          </div>\n\n          {/* User Menu */}\n          <div className=\"flex items-center space-x-4\">\n            {user ? (\n              <>\n                {/* Notifications */}\n                <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n                  <Bell className=\"h-4 w-4\" />\n                  <Badge className=\"absolute -top-1 -right-1 h-5 w-5 p-0 text-xs bg-red-500\">\n                    3\n                  </Badge>\n                </Button>\n\n                {/* User Dropdown */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"flex items-center space-x-2\">\n                      <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                        <User className=\"h-4 w-4 text-blue-600\" />\n                      </div>\n                      <div className=\"hidden md:block text-left\">\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {user.firstName} {user.lastName}\n                        </p>\n                        <p className=\"text-xs text-gray-500 capitalize\">{user.role}</p>\n                      </div>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-56\">\n                    <DropdownMenuItem onClick={() => setLocation(getDashboardLink())}>\n                      <User className=\"mr-2 h-4 w-4\" />\n                      Dashboard\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => setLocation(\"/appointments\")}>\n                      Appointments\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => setLocation(\"/medical-records\")}>\n                      Medical Records\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={handleLogout} className=\"text-red-600\">\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      Sign out\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            ) : (\n              <Button \n                onClick={() => setLocation(\"/login\")}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                Login\n              </Button>\n            )}\n\n            {/* Mobile Menu Button */}\n            <div className=\"md:hidden\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              >\n                {isMobileMenuOpen ? (\n                  <X className=\"h-6 w-6\" />\n                ) : (\n                  <Menu className=\"h-6 w-6\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3 border-t border-gray-200\">\n              {navigationItems\n                .filter(item => item.show)\n                .map((item) => (\n                  <button\n                    key={item.name}\n                    onClick={() => {\n                      setLocation(item.href);\n                      setIsMobileMenuOpen(false);\n                    }}\n                    className=\"text-gray-600 hover:text-blue-600 block px-3 py-2 rounded-md text-base font-medium w-full text-left transition-colors\"\n                  >\n                    {item.name}\n                  </button>\n                ))}\n              {!user && (\n                <Button \n                  onClick={() => {\n                    setLocation(\"/login\");\n                    setIsMobileMenuOpen(false);\n                  }}\n                  className=\"w-full mt-4 bg-blue-600 hover:bg-blue-700\"\n                >\n                  Login\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":6421},"client/src/components/protected-route.jsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle, Loader2 } from \"lucide-react\";\n\nexport default function ProtectedRoute({ children, allowedRoles = [] }) {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex flex-col items-center\">\n              <Loader2 className=\"h-8 w-8 text-blue-600 animate-spin mb-4\" />\n              <h1 className=\"text-xl font-semibold text-gray-900\">Loading...</h1>\n              <p className=\"mt-2 text-sm text-gray-600\">\n                Verifying your authentication\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null; // Will redirect to login\n  }\n\n  if (allowedRoles.length > 0 && !allowedRoles.includes(user.role)) {\n    return (\n      <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex flex-col items-center\">\n              <AlertCircle className=\"h-8 w-8 text-red-500 mb-4\" />\n              <h1 className=\"text-xl font-semibold text-gray-900\">Access Denied</h1>\n              <p className=\"mt-2 text-sm text-gray-600 text-center\">\n                You don't have permission to access this page. \n                Required role: {allowedRoles.join(\", \")}\n              </p>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Your role: {user.role}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return children;\n}\n","size_bytes":2107},"client/src/components/role-card.jsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Check } from \"lucide-react\";\n\nexport default function RoleCard({ title, icon: Icon, color, description, features, onClick }) {\n  const getColorClasses = (color) => {\n    const colorMap = {\n      'medical-blue': {\n        iconBg: 'bg-blue-100',\n        iconText: 'text-blue-600',\n        hoverIconBg: 'group-hover:bg-blue-600',\n        hoverIconText: 'group-hover:text-white',\n        buttonBg: 'bg-blue-600',\n        buttonHover: 'hover:bg-blue-700',\n        border: 'hover:border-blue-200',\n      },\n      'healing-green': {\n        iconBg: 'bg-green-100',\n        iconText: 'text-green-600',\n        hoverIconBg: 'group-hover:bg-green-600',\n        hoverIconText: 'group-hover:text-white',\n        buttonBg: 'bg-green-600',\n        buttonHover: 'hover:bg-green-700',\n        border: 'hover:border-green-200',\n      },\n      'healthcare-orange': {\n        iconBg: 'bg-orange-100',\n        iconText: 'text-orange-500',\n        hoverIconBg: 'group-hover:bg-orange-500',\n        hoverIconText: 'group-hover:text-white',\n        buttonBg: 'bg-orange-500',\n        buttonHover: 'hover:bg-orange-600',\n        border: 'hover:border-orange-200',\n      },\n      'purple': {\n        iconBg: 'bg-purple-100',\n        iconText: 'text-purple-600',\n        hoverIconBg: 'group-hover:bg-purple-600',\n        hoverIconText: 'group-hover:text-white',\n        buttonBg: 'bg-purple-600',\n        buttonHover: 'hover:bg-purple-700',\n        border: 'hover:border-purple-200',\n      },\n    };\n    return colorMap[color] || colorMap['medical-blue'];\n  };\n\n  const colors = getColorClasses(color);\n\n  return (\n    <div className={`bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 ${colors.border} group cursor-pointer`}>\n      <div className=\"p-8 text-center\">\n        <div className={`w-16 h-16 ${colors.iconBg} ${colors.hoverIconBg} rounded-full flex items-center justify-center mx-auto mb-6 transition-colors`}>\n          <Icon className={`${colors.iconText} ${colors.hoverIconText} h-8 w-8 transition-colors`} />\n        </div>\n        \n        <h3 className=\"text-xl font-bold text-gray-900 mb-3\">{title}</h3>\n        \n        <p className=\"text-gray-600 text-sm mb-6\">\n          {description}\n        </p>\n        \n        <ul className=\"text-left text-sm text-gray-600 space-y-2 mb-6\">\n          {features.map((feature, index) => (\n            <li key={index} className=\"flex items-center\">\n              <Check className=\"h-4 w-4 text-green-600 mr-2 flex-shrink-0\" />\n              {feature}\n            </li>\n          ))}\n        </ul>\n        \n        <Button \n          onClick={onClick}\n          className={`w-full ${colors.buttonBg} ${colors.buttonHover} text-white transition-colors`}\n        >\n          Access Dashboard\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2872},"client/src/components/stat-card.jsx":{"content":"export default function StatCard({ title, value, icon: Icon, color = \"blue\" }) {\n  const getColorClasses = (color) => {\n    const colorMap = {\n      blue: {\n        iconBg: 'bg-blue-100',\n        iconText: 'text-blue-600',\n      },\n      green: {\n        iconBg: 'bg-green-100',\n        iconText: 'text-green-600',\n      },\n      orange: {\n        iconBg: 'bg-orange-100',\n        iconText: 'text-orange-500',\n      },\n      purple: {\n        iconBg: 'bg-purple-100',\n        iconText: 'text-purple-600',\n      },\n      red: {\n        iconBg: 'bg-red-100',\n        iconText: 'text-red-600',\n      },\n    };\n    return colorMap[color] || colorMap.blue;\n  };\n\n  const colors = getColorClasses(color);\n\n  return (\n    <div className=\"stat-card rounded-xl p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n          <p className=\"text-2xl font-bold text-gray-900\">{value}</p>\n        </div>\n        <div className={`w-12 h-12 ${colors.iconBg} rounded-full flex items-center justify-center`}>\n          <Icon className={`h-6 w-6 ${colors.iconText}`} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1193},"client/src/hooks/use-auth.jsx":{"content":"import { useState, useEffect, createContext, useContext } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst AuthContext = createContext({});\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Query to get user profile if token exists\n  const { data: profileData, isLoading: profileLoading, error } = useQuery({\n    queryKey: [\"/api/users/profile\"],\n    enabled: !!localStorage.getItem(\"token\"),\n    retry: false,\n  });\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    const storedUser = localStorage.getItem(\"user\");\n\n    if (token && storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        setUser(parsedUser);\n      } catch (e) {\n        console.error(\"Failed to parse stored user:\", e);\n        localStorage.removeItem(\"user\");\n        localStorage.removeItem(\"token\");\n      }\n    }\n    \n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    if (profileData) {\n      setUser(profileData);\n      localStorage.setItem(\"user\", JSON.stringify(profileData));\n    } else if (error && error.message.includes(\"401\")) {\n      // Token is invalid, clear auth data\n      logout();\n    }\n  }, [profileData, error]);\n\n  const login = (userData, token) => {\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"user\", JSON.stringify(userData));\n    setUser(userData);\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    isLoading: isLoading || profileLoading,\n    login,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":1980},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Navbar from \"@/components/navbar\";\nimport StatCard from \"@/components/stat-card\";\nimport { Users, UserCheck, Calendar, Server, Download, UserPlus, UsersIcon, BarChart, Settings } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function AdminDashboard() {\n  const { data: dashboardStats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/analytics/dashboard-stats\"],\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const { data: appointments = [] } = useQuery({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const recentActivity = [\n    {\n      id: 1,\n      description: \"New user registered\",\n      time: \"2 minutes ago\",\n      icon: UserPlus,\n      color: \"blue\"\n    },\n    {\n      id: 2,\n      description: \"Doctor updated patient record\",\n      time: \"5 minutes ago\",\n      icon: UserCheck,\n      color: \"green\"\n    },\n    {\n      id: 3,\n      description: \"Appointment scheduled\",\n      time: \"10 minutes ago\",\n      icon: Calendar,\n      color: \"orange\"\n    },\n    {\n      id: 4,\n      description: \"System backup completed\",\n      time: \"1 hour ago\",\n      icon: Server,\n      color: \"purple\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Admin Dashboard</h1>\n              <p className=\"text-gray-600 mt-2\">System Overview and Management</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" className=\"flex items-center\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export Data\n              </Button>\n              <Button className=\"bg-orange-500 hover:bg-orange-600 flex items-center\">\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Add User\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Admin Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <StatCard\n            title=\"Total Users\"\n            value={statsLoading ? \"...\" : dashboardStats?.totalUsers?.toString() || \"0\"}\n            icon={Users}\n            color=\"blue\"\n          />\n          \n          <StatCard\n            title=\"Active Doctors\"\n            value={statsLoading ? \"...\" : dashboardStats?.totalDoctors?.toString() || \"0\"}\n            icon={UserCheck}\n            color=\"green\"\n          />\n          \n          <StatCard\n            title=\"Appointments Today\"\n            value={statsLoading ? \"...\" : dashboardStats?.todayAppointments?.toString() || \"0\"}\n            icon={Calendar}\n            color=\"orange\"\n          />\n          \n          <StatCard\n            title=\"System Health\"\n            value=\"99.8%\"\n            icon={Server}\n            color=\"purple\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* System Analytics */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"flex items-center\">\n                      <BarChart className=\"h-5 w-5 mr-2\" />\n                      System Analytics\n                    </CardTitle>\n                    <CardDescription>\n                      Overview of system usage and performance\n                    </CardDescription>\n                  </div>\n                  <Select defaultValue=\"7days\">\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"7days\">Last 7 days</SelectItem>\n                      <SelectItem value=\"30days\">Last 30 days</SelectItem>\n                      <SelectItem value=\"90days\">Last 90 days</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64 bg-gradient-to-br from-blue-50 to-green-50 rounded-lg flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <BarChart className=\"h-16 w-16 text-blue-600 mx-auto mb-4\" />\n                    <p className=\"text-gray-600 text-lg font-medium\">Analytics Dashboard</p>\n                    <p className=\"text-sm text-gray-500 mt-2\">\n                      Real-time system metrics and usage statistics\n                    </p>\n                    <div className=\"grid grid-cols-2 gap-4 mt-6 text-sm\">\n                      <div className=\"bg-white rounded-lg p-3\">\n                        <p className=\"text-gray-600\">Active Sessions</p>\n                        <p className=\"text-2xl font-bold text-blue-600\">\n                          {dashboardStats?.activeUsers || 0}\n                        </p>\n                      </div>\n                      <div className=\"bg-white rounded-lg p-3\">\n                        <p className=\"text-gray-600\">Total Appointments</p>\n                        <p className=\"text-2xl font-bold text-green-600\">\n                          {dashboardStats?.totalAppointments || 0}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Activity & Quick Management */}\n          <div className=\"space-y-6\">\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"h-5 w-5 mr-2\" />\n                  Recent Activity\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {recentActivity.map((activity) => {\n                    const IconComponent = activity.icon;\n                    return (\n                      <div key={activity.id} className=\"flex items-start space-x-3\">\n                        <div className={`w-8 h-8 bg-${activity.color}-100 rounded-full flex items-center justify-center flex-shrink-0`}>\n                          <IconComponent className={`h-4 w-4 text-${activity.color}-600`} />\n                        </div>\n                        <div className=\"min-w-0 flex-1\">\n                          <p className=\"text-sm text-gray-900\">{activity.description}</p>\n                          <p className=\"text-xs text-gray-500\">{activity.time}</p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Management */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start bg-blue-50 text-blue-700 hover:bg-blue-100\"\n                  >\n                    <UsersIcon className=\"h-4 w-4 mr-3\" />\n                    User Management\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start bg-green-50 text-green-700 hover:bg-green-100\"\n                  >\n                    <BarChart className=\"h-4 w-4 mr-3\" />\n                    System Reports\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start bg-orange-50 text-orange-700 hover:bg-orange-100\"\n                  >\n                    <Settings className=\"h-4 w-4 mr-3\" />\n                    System Settings\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* System Status */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Server className=\"h-5 w-5 mr-2\" />\n                  System Status\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Database</span>\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                      Healthy\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">API Services</span>\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                      Online\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Storage</span>\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800\">\n                      85% Used\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Backups</span>\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                      Up to Date\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10479},"client/src/pages/appointment-booking.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\nimport Navbar from \"@/components/navbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar, UserCheck, Star, ArrowLeft } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nconst appointmentSchema = z.object({\n  doctorId: z.string().min(1, \"Please select a doctor\"),\n  appointmentDate: z.string().min(1, \"Please select a date\"),\n  timeSlot: z.string().min(1, \"Please select a time slot\"),\n  reason: z.string().min(1, \"Please select a reason for visit\"),\n  insuranceProvider: z.string().optional(),\n  notes: z.string().optional(),\n});\n\nexport default function AppointmentBooking() {\n  const [, setLocation] = useLocation();\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(appointmentSchema),\n    defaultValues: {\n      doctorId: \"\",\n      appointmentDate: \"\",\n      timeSlot: \"\",\n      reason: \"\",\n      insuranceProvider: \"\",\n      notes: \"\",\n    },\n  });\n\n  const { data: doctors = [], isLoading: doctorsLoading } = useQuery({\n    queryKey: [\"/api/users\", { role: \"doctor\" }],\n  });\n\n  const { data: availableSlots = [], isLoading: slotsLoading } = useQuery({\n    queryKey: [\"/api/appointments/available-slots\", { doctorId: selectedDoctor?.id, date: selectedDate }],\n    enabled: !!(selectedDoctor && selectedDate),\n  });\n\n  const createAppointmentMutation = useMutation({\n    mutationFn: async (data) => {\n      const response = await apiRequest(\"POST\", \"/api/appointments\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Appointment Booked Successfully\",\n        description: \"Your appointment has been scheduled and you will receive a confirmation email.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      setLocation(\"/dashboard/patient\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to book appointment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data) => {\n    createAppointmentMutation.mutate(data);\n  };\n\n  const handleDoctorSelect = (doctorId) => {\n    const doctor = doctors.find(d => d.id === doctorId);\n    setSelectedDoctor(doctor);\n    form.setValue(\"doctorId\", doctorId);\n    form.setValue(\"timeSlot\", \"\"); // Reset time slot when doctor changes\n  };\n\n  const handleDateSelect = (date) => {\n    setSelectedDate(date);\n    form.setValue(\"appointmentDate\", date);\n    form.setValue(\"timeSlot\", \"\"); // Reset time slot when date changes\n  };\n\n  // Generate next 30 days for date selection\n  const generateDates = () => {\n    const dates = [];\n    const today = new Date();\n    for (let i = 1; i <= 30; i++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() + i);\n      // Skip weekends for simplicity\n      if (date.getDay() !== 0 && date.getDay() !== 6) {\n        dates.push(date);\n      }\n    }\n    return dates;\n  };\n\n  const availableDates = generateDates();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <Button \n            variant=\"outline\" \n            onClick={() => setLocation(-1)}\n            className=\"mb-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n          <div className=\"text-center\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">Book an Appointment</h1>\n            <p className=\"text-xl text-gray-600\">Schedule your visit with our healthcare professionals</p>\n          </div>\n        </div>\n\n        <Card className=\"shadow-xl border-0\">\n          <CardHeader>\n            <CardTitle>Appointment Details</CardTitle>\n            <CardDescription>\n              Please fill in the following information to schedule your appointment\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n              {/* Step 1: Doctor Selection */}\n              <div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-6\">Select a Doctor</h3>\n                {doctorsLoading ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {[...Array(4)].map((_, i) => (\n                      <div key={i} className=\"animate-pulse bg-gray-200 h-24 rounded-xl\"></div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {doctors.map((doctor) => (\n                      <label key={doctor.id} className=\"relative cursor-pointer\">\n                        <input\n                          type=\"radio\"\n                          name=\"doctor\"\n                          value={doctor.id}\n                          className=\"sr-only peer\"\n                          onChange={() => handleDoctorSelect(doctor.id)}\n                        />\n                        <div className=\"border-2 border-gray-200 rounded-xl p-4 peer-checked:border-blue-600 peer-checked:bg-blue-50 hover:border-gray-300 transition-colors\">\n                          <div className=\"flex items-center\">\n                            <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                              <UserCheck className=\"h-6 w-6 text-blue-600\" />\n                            </div>\n                            <div className=\"ml-4\">\n                              <h4 className=\"font-semibold text-gray-900\">\n                                Dr. {doctor.firstName} {doctor.lastName}\n                              </h4>\n                              <p className=\"text-sm text-gray-600\">{doctor.specialization || \"General Practice\"}</p>\n                              <div className=\"flex items-center mt-1\">\n                                <Star className=\"h-3 w-3 text-yellow-400 fill-current\" />\n                                <span className=\"text-xs text-gray-600 ml-1\">4.9 (127 reviews)</span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </label>\n                    ))}\n                  </div>\n                )}\n                {form.formState.errors.doctorId && (\n                  <p className=\"text-sm text-red-600 mt-2\">{form.formState.errors.doctorId.message}</p>\n                )}\n              </div>\n\n              {/* Step 2: Date and Time Selection */}\n              {selectedDoctor && (\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-6\">Select Date & Time</h3>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                    {/* Date Selection */}\n                    <div>\n                      <Label className=\"text-base font-medium mb-4 block\">Choose Date</Label>\n                      <div className=\"grid grid-cols-2 gap-2 max-h-64 overflow-y-auto\">\n                        {availableDates.map((date) => {\n                          const dateStr = date.toISOString().split('T')[0];\n                          return (\n                            <label key={dateStr} className=\"relative cursor-pointer\">\n                              <input\n                                type=\"radio\"\n                                name=\"appointmentDate\"\n                                value={dateStr}\n                                className=\"sr-only peer\"\n                                onChange={() => handleDateSelect(dateStr)}\n                              />\n                              <div className=\"border border-gray-200 rounded-lg p-3 text-center peer-checked:border-blue-600 peer-checked:bg-blue-50 hover:border-gray-300 transition-colors\">\n                                <div className=\"text-sm font-medium text-gray-900\">\n                                  {date.toLocaleDateString('en-US', { \n                                    weekday: 'short', \n                                    month: 'short', \n                                    day: 'numeric' \n                                  })}\n                                </div>\n                              </div>\n                            </label>\n                          );\n                        })}\n                      </div>\n                      {form.formState.errors.appointmentDate && (\n                        <p className=\"text-sm text-red-600 mt-2\">{form.formState.errors.appointmentDate.message}</p>\n                      )}\n                    </div>\n                    \n                    {/* Time Slots */}\n                    <div>\n                      <Label className=\"text-base font-medium mb-4 block\">Available Times</Label>\n                      {selectedDate ? (\n                        slotsLoading ? (\n                          <div className=\"grid grid-cols-3 gap-2\">\n                            {[...Array(6)].map((_, i) => (\n                              <div key={i} className=\"animate-pulse bg-gray-200 h-12 rounded-lg\"></div>\n                            ))}\n                          </div>\n                        ) : availableSlots.length > 0 ? (\n                          <div className=\"grid grid-cols-3 gap-2\">\n                            {availableSlots.map((slot) => (\n                              <label key={slot} className=\"relative cursor-pointer\">\n                                <input\n                                  type=\"radio\"\n                                  name=\"timeSlot\"\n                                  value={slot}\n                                  className=\"sr-only peer\"\n                                  {...form.register(\"timeSlot\")}\n                                />\n                                <div className=\"border border-gray-200 rounded-lg p-3 text-center peer-checked:border-blue-600 peer-checked:bg-blue-50 hover:border-gray-300 transition-colors\">\n                                  <span className=\"text-sm font-medium text-gray-900\">{slot}</span>\n                                </div>\n                              </label>\n                            ))}\n                          </div>\n                        ) : (\n                          <div className=\"text-center py-8\">\n                            <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                            <p className=\"text-gray-500\">No available slots for this date</p>\n                          </div>\n                        )\n                      ) : (\n                        <div className=\"text-center py-8\">\n                          <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                          <p className=\"text-gray-500\">Please select a date first</p>\n                        </div>\n                      )}\n                      {form.formState.errors.timeSlot && (\n                        <p className=\"text-sm text-red-600 mt-2\">{form.formState.errors.timeSlot.message}</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Step 3: Appointment Details */}\n              {selectedDate && form.watch(\"timeSlot\") && (\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-6\">Appointment Details</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label htmlFor=\"reason\">Reason for Visit</Label>\n                      <Select onValueChange={(value) => form.setValue(\"reason\", value)}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select reason\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"routine-checkup\">Routine Checkup</SelectItem>\n                          <SelectItem value=\"follow-up\">Follow-up</SelectItem>\n                          <SelectItem value=\"new-patient\">New Patient</SelectItem>\n                          <SelectItem value=\"urgent-care\">Urgent Care</SelectItem>\n                          <SelectItem value=\"consultation\">Consultation</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      {form.formState.errors.reason && (\n                        <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.reason.message}</p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"insuranceProvider\">Insurance Provider</Label>\n                      <Select onValueChange={(value) => form.setValue(\"insuranceProvider\", value)}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select insurance\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"blue-cross\">Blue Cross Blue Shield</SelectItem>\n                          <SelectItem value=\"aetna\">Aetna</SelectItem>\n                          <SelectItem value=\"cigna\">Cigna</SelectItem>\n                          <SelectItem value=\"self-pay\">Self-Pay</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div className=\"mt-6\">\n                    <Label htmlFor=\"notes\">Additional Notes</Label>\n                    <Textarea\n                      id=\"notes\"\n                      rows={3}\n                      placeholder=\"Any specific concerns or notes for the doctor...\"\n                      {...form.register(\"notes\")}\n                    />\n                  </div>\n                </div>\n              )}\n\n              {/* Form Actions */}\n              <div className=\"flex items-center justify-between pt-6 border-t border-gray-200\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\"\n                  onClick={() => setLocation(-1)}\n                >\n                  Cancel\n                </Button>\n                <div className=\"flex space-x-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    disabled={!selectedDoctor}\n                  >\n                    Save as Draft\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                    disabled={createAppointmentMutation.isPending}\n                  >\n                    {createAppointmentMutation.isPending ? \"Booking...\" : \"Book Appointment\"}\n                  </Button>\n                </div>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15776},"client/src/pages/contact.jsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport Navbar from \"@/components/navbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { MapPin, Phone, Mail, Clock, Star } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst contactSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  subject: z.string().min(1, \"Please select a subject\"),\n  message: z.string().min(10, \"Message must be at least 10 characters long\"),\n});\n\nexport default function Contact() {\n  const [rating, setRating] = useState(0);\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(contactSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      subject: \"\",\n      message: \"\",\n    },\n  });\n\n  const submitContactMutation = useMutation({\n    mutationFn: async (data) => {\n      const response = await apiRequest(\"POST\", \"/api/contact\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent Successfully\",\n        description: \"Thank you for contacting us. We'll get back to you soon!\",\n      });\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Send Message\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const submitFeedbackMutation = useMutation({\n    mutationFn: async (data) => {\n      const response = await apiRequest(\"POST\", \"/api/feedback\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Feedback Submitted\",\n        description: \"Thank you for your feedback!\",\n      });\n      setRating(0);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Submit Feedback\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data) => {\n    submitContactMutation.mutate(data);\n  };\n\n  const handleRating = (starRating) => {\n    setRating(starRating);\n    submitFeedbackMutation.mutate({\n      rating: starRating,\n      category: \"general\",\n      comment: \"Quick rating submission\",\n    });\n  };\n\n  const contactInfo = [\n    {\n      icon: MapPin,\n      title: \"Visit Us\",\n      content: \"123 Healthcare Drive\\nMedical District, MD 12345\",\n      color: \"blue\",\n    },\n    {\n      icon: Phone,\n      title: \"Call Us\",\n      content: \"Emergency: (555) 911-1234\\nGeneral: (555) 123-4567\",\n      color: \"green\",\n    },\n    {\n      icon: Mail,\n      title: \"Email Us\",\n      content: \"info@healthsenseplus.com\\nsupport@healthsenseplus.com\",\n      color: \"orange\",\n    },\n    {\n      icon: Clock,\n      title: \"Office Hours\",\n      content: \"Monday - Friday: 8:00 AM - 6:00 PM\\nSaturday: 9:00 AM - 4:00 PM\\nSunday: Emergency Only\",\n      color: \"purple\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl lg:text-5xl font-bold text-gray-900 mb-4\">Contact & Support</h1>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Get in touch with our healthcare team or provide feedback about your experience\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <Card className=\"shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">Send us a Message</CardTitle>\n              <CardDescription>\n                We'd love to hear from you. Send us a message and we'll respond as soon as possible.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      placeholder=\"Your first name\"\n                      {...form.register(\"firstName\")}\n                    />\n                    {form.formState.errors.firstName && (\n                      <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.firstName.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      placeholder=\"Your last name\"\n                      {...form.register(\"lastName\")}\n                    />\n                    {form.formState.errors.lastName && (\n                      <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.lastName.message}</p>\n                    )}\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"your.email@example.com\"\n                    {...form.register(\"email\")}\n                  />\n                  {form.formState.errors.email && (\n                    <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.email.message}</p>\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"subject\">Subject</Label>\n                  <Select onValueChange={(value) => form.setValue(\"subject\", value)}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a subject\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"general\">General Inquiry</SelectItem>\n                      <SelectItem value=\"technical\">Technical Support</SelectItem>\n                      <SelectItem value=\"appointment\">Appointment Issue</SelectItem>\n                      <SelectItem value=\"billing\">Billing Question</SelectItem>\n                      <SelectItem value=\"feature\">Feature Request</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.subject && (\n                    <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.subject.message}</p>\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"message\">Message</Label>\n                  <Textarea\n                    id=\"message\"\n                    rows={4}\n                    placeholder=\"Tell us how we can help you...\"\n                    {...form.register(\"message\")}\n                  />\n                  {form.formState.errors.message && (\n                    <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.message.message}</p>\n                  )}\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                  disabled={submitContactMutation.isPending}\n                >\n                  {submitContactMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Contact Information */}\n          <div className=\"space-y-8\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Get in Touch</h2>\n              <div className=\"space-y-6\">\n                {contactInfo.map((info, index) => {\n                  const IconComponent = info.icon;\n                  return (\n                    <div key={index} className=\"flex items-start\">\n                      <div className={`w-12 h-12 bg-${info.color}-100 rounded-full flex items-center justify-center flex-shrink-0`}>\n                        <IconComponent className={`h-5 w-5 text-${info.color}-600`} />\n                      </div>\n                      <div className=\"ml-4\">\n                        <h4 className=\"font-semibold text-gray-900\">{info.title}</h4>\n                        <p className=\"text-gray-600 whitespace-pre-line\">{info.content}</p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Feedback Section */}\n            <Card className=\"bg-gradient-to-br from-blue-50 to-green-50\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Star className=\"h-5 w-5 mr-2 text-yellow-500\" />\n                  We Value Your Feedback\n                </CardTitle>\n                <CardDescription>\n                  Help us improve our healthcare services by sharing your experience.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm text-gray-600\">Rate your experience:</span>\n                    <div className=\"flex space-x-1\">\n                      {[1, 2, 3, 4, 5].map((star) => (\n                        <button\n                          key={star}\n                          onClick={() => handleRating(star)}\n                          className={`text-2xl ${\n                            star <= rating ? \"text-yellow-400\" : \"text-gray-300\"\n                          } hover:text-yellow-500 transition-colors`}\n                          disabled={submitFeedbackMutation.isPending}\n                        >\n                          <Star className=\"h-6 w-6 fill-current\" />\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  {rating > 0 && (\n                    <div className=\"text-center\">\n                      <p className=\"text-green-600 font-medium\">\n                        Thank you for rating us {rating} star{rating !== 1 ? 's' : ''}!\n                      </p>\n                    </div>\n                  )}\n                  \n                  <Button \n                    className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                    onClick={() => {\n                      // This could open a more detailed feedback modal\n                      toast({\n                        title: \"Detailed Feedback\",\n                        description: \"This feature would open a detailed feedback form.\",\n                      });\n                    }}\n                  >\n                    Leave Detailed Feedback\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Emergency Contact */}\n            <Card className=\"border-red-200 bg-red-50\">\n              <CardHeader>\n                <CardTitle className=\"text-red-800\">Emergency Contact</CardTitle>\n                <CardDescription className=\"text-red-700\">\n                  For medical emergencies, please call 911 immediately\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center space-x-4\">\n                  <Phone className=\"h-6 w-6 text-red-600\" />\n                  <div>\n                    <p className=\"font-semibold text-red-800\">Emergency Hotline</p>\n                    <p className=\"text-red-700\">(555) 911-1234</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12464},"client/src/pages/doctor-dashboard.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Navbar from \"@/components/navbar\";\nimport StatCard from \"@/components/stat-card\";\nimport AppointmentCard from \"@/components/appointment-card\";\nimport { Users, Calendar, ClipboardCheck, Star, Clock, UserPlus, FileText, PlusCircle, BarChart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\n\nexport default function DoctorDashboard() {\n  const [, setLocation] = useLocation();\n  const user = JSON.parse(localStorage.getItem(\"user\") || \"{}\");\n\n  const { data: appointments = [], isLoading: appointmentsLoading } = useQuery({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\", { role: \"patient\" }],\n  });\n\n  const getGreeting = () => {\n    return `Welcome back, Dr. ${user.lastName}`;\n  };\n\n  const today = new Date().toISOString().split('T')[0];\n  const todayAppointments = appointments.filter(apt => apt.appointmentDate === today);\n  const upcomingAppointments = todayAppointments\n    .filter(apt => apt.status === 'scheduled')\n    .sort((a, b) => a.timeSlot.localeCompare(b.timeSlot));\n\n  const recentPatients = users\n    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\n    .slice(0, 5);\n\n  const remainingAppointments = upcomingAppointments.length;\n  const completedToday = todayAppointments.filter(apt => apt.status === 'completed').length;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Doctor Dashboard</h1>\n              <p className=\"text-gray-600 mt-2\">{getGreeting()}</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" className=\"flex items-center\">\n                <Clock className=\"h-4 w-4 mr-2\" />\n                Schedule\n              </Button>\n              <Button \n                className=\"bg-green-600 hover:bg-green-700 flex items-center\"\n                onClick={() => setLocation(\"/medical-records\")}\n              >\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Add Patient Record\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Doctor Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <StatCard\n            title=\"Today's Patients\"\n            value={todayAppointments.length.toString()}\n            icon={Users}\n            color=\"blue\"\n          />\n          \n          <StatCard\n            title=\"Appointments\"\n            value={`${remainingAppointments} Remaining`}\n            icon={Calendar}\n            color=\"green\"\n          />\n          \n          <StatCard\n            title=\"Completed Today\"\n            value={completedToday.toString()}\n            icon={ClipboardCheck}\n            color=\"orange\"\n          />\n          \n          <StatCard\n            title=\"Patient Satisfaction\"\n            value=\"4.8/5.0\"\n            icon={Star}\n            color=\"purple\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Today's Schedule */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"flex items-center\">\n                      <Calendar className=\"h-5 w-5 mr-2\" />\n                      Today's Schedule\n                    </CardTitle>\n                    <CardDescription>\n                      Your appointments for today, {new Date().toLocaleDateString()}\n                    </CardDescription>\n                  </div>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    className=\"text-green-600 hover:text-green-700\"\n                  >\n                    View Full Calendar\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {appointmentsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"animate-pulse bg-gray-200 h-20 rounded-lg\"></div>\n                    ))}\n                  </div>\n                ) : upcomingAppointments.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {upcomingAppointments.map((appointment) => (\n                      <div key={appointment.id} className=\"appointment-card rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center\">\n                            <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n                              <Users className=\"h-5 w-5 text-purple-600\" />\n                            </div>\n                            <div className=\"ml-4\">\n                              <h4 className=\"font-medium text-gray-900\">Patient #{appointment.patientId.slice(-6)}</h4>\n                              <p className=\"text-sm text-gray-600\">{appointment.reason || \"Consultation\"}</p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-sm font-medium text-gray-900\">{appointment.timeSlot}</p>\n                            <p className=\"text-sm text-gray-600\">30 min</p>\n                          </div>\n                        </div>\n                        <div className=\"mt-4 flex items-center justify-between\">\n                          <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                            Scheduled\n                          </span>\n                          <div className=\"flex space-x-2\">\n                            <Button \n                              size=\"sm\" \n                              className=\"bg-green-600 hover:bg-green-700 text-xs\"\n                            >\n                              Start Visit\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              className=\"text-blue-600 hover:text-blue-700 text-xs\"\n                              onClick={() => setLocation(\"/medical-records\")}\n                            >\n                              View Chart\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">No appointments scheduled for today</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Patient Management & Quick Actions */}\n          <div className=\"space-y-6\">\n            {/* Recent Patients */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Users className=\"h-5 w-5 mr-2\" />\n                  Recent Patients\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {recentPatients.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {recentPatients.map((patient) => (\n                      <div key={patient.id} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center\">\n                            <Users className=\"h-4 w-4 text-gray-600\" />\n                          </div>\n                          <div className=\"ml-3\">\n                            <p className=\"text-sm font-medium text-gray-900\">\n                              {patient.firstName} {patient.lastName}\n                            </p>\n                            <p className=\"text-xs text-gray-600\">\n                              Registered: {new Date(patient.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                        </div>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          className=\"text-blue-600 hover:text-blue-700 text-xs\"\n                          onClick={() => setLocation(\"/medical-records\")}\n                        >\n                          View\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-4\">\n                    <Users className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                    <p className=\"text-sm text-gray-500\">No recent patients</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start bg-blue-50 text-blue-700 hover:bg-blue-100\"\n                    onClick={() => setLocation(\"/medical-records\")}\n                  >\n                    <FileText className=\"h-4 w-4 mr-3\" />\n                    Create Medical Record\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start bg-green-50 text-green-700 hover:bg-green-100\"\n                  >\n                    <PlusCircle className=\"h-4 w-4 mr-3\" />\n                    Write Prescription\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start bg-orange-50 text-orange-700 hover:bg-orange-100\"\n                  >\n                    <BarChart className=\"h-4 w-4 mr-3\" />\n                    View Analytics\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10988},"client/src/pages/landing.jsx":{"content":"import { useLocation } from \"wouter\";\nimport Navbar from \"@/components/navbar\";\nimport AnimatedButton from \"@/components/animated-button\";\nimport RoleCard from \"@/components/role-card\";\nimport { Heart, Check, Users, UserCheck, Settings, UserNurse } from \"lucide-react\";\n\nexport default function Landing() {\n  const [, setLocation] = useLocation();\n\n  const handleGetStarted = () => {\n    setLocation(\"/login\");\n  };\n\n  const handleRoleSelect = (role) => {\n    localStorage.setItem('selectedRole', role);\n    setLocation(\"/login\");\n  };\n\n  const roles = [\n    {\n      title: \"Patient\",\n      icon: Users,\n      color: \"medical-blue\",\n      description: \"Manage your health records, book appointments, and communicate with healthcare providers\",\n      features: [\n        \"View medical history\",\n        \"Book appointments\", \n        \"Access lab results\",\n        \"Manage prescriptions\"\n      ],\n      onClick: () => handleRoleSelect(\"patient\")\n    },\n    {\n      title: \"Doctor\", \n      icon: UserCheck,\n      color: \"healing-green\",\n      description: \"Manage patient records, appointments, and provide comprehensive healthcare services\",\n      features: [\n        \"Patient management\",\n        \"Schedule management\",\n        \"Write prescriptions\", \n        \"Medical records\"\n      ],\n      onClick: () => handleRoleSelect(\"doctor\")\n    },\n    {\n      title: \"Admin\",\n      icon: Settings, \n      color: \"healthcare-orange\",\n      description: \"Oversee system operations, manage users, and maintain healthcare facility operations\",\n      features: [\n        \"User management\",\n        \"System analytics\",\n        \"Financial reports\",\n        \"Audit logs\"\n      ],\n      onClick: () => handleRoleSelect(\"admin\")\n    },\n    {\n      title: \"Nurse\",\n      icon: UserNurse,\n      color: \"purple\", \n      description: \"Assist with patient care, manage vitals, and coordinate with medical staff\",\n      features: [\n        \"Patient vitals\",\n        \"Medication tracking\",\n        \"Care coordination\",\n        \"Patient communication\"\n      ],\n      onClick: () => handleRoleSelect(\"nurse\")\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-blue-50 to-green-50 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h1 className=\"text-4xl lg:text-6xl font-bold text-gray-900 mb-6\">\n                Complete Healthcare\n                <span className=\"text-blue-600\"> Management System</span>\n              </h1>\n              <p className=\"text-xl text-gray-600 mb-8 leading-relaxed\">\n                Streamline patient care, manage appointments, and access medical records with our comprehensive healthcare platform designed for modern medical practices.\n              </p>\n              \n              <div className=\"flex flex-wrap gap-4 mb-8\">\n                <div className=\"flex items-center bg-white px-4 py-2 rounded-full shadow-sm\">\n                  <Check className=\"h-5 w-5 text-green-600 mr-2\" />\n                  <span className=\"text-sm font-medium\">HIPAA Compliant</span>\n                </div>\n                <div className=\"flex items-center bg-white px-4 py-2 rounded-full shadow-sm\">\n                  <Check className=\"h-5 w-5 text-green-600 mr-2\" />\n                  <span className=\"text-sm font-medium\">Real-time Updates</span>\n                </div>\n                <div className=\"flex items-center bg-white px-4 py-2 rounded-full shadow-sm\">\n                  <Check className=\"h-5 w-5 text-green-600 mr-2\" />\n                  <span className=\"text-sm font-medium\">Multi-role Access</span>\n                </div>\n              </div>\n              \n              <AnimatedButton onClick={handleGetStarted} />\n            </div>\n            \n            <div className=\"relative\">\n              <div className=\"bg-white rounded-2xl shadow-2xl p-6 transform rotate-3 hover:rotate-0 transition-transform duration-300\">\n                <div className=\"bg-gradient-to-r from-blue-600 to-green-600 h-3 rounded-t-lg mb-6\"></div>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                        <UserCheck className=\"h-5 w-5 text-blue-600\" />\n                      </div>\n                      <div className=\"ml-3\">\n                        <p className=\"font-semibold text-gray-900\">Dr. Sarah Wilson</p>\n                        <p className=\"text-sm text-gray-500\">Cardiologist</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-medium text-green-600\">Available</p>\n                      <p className=\"text-xs text-gray-500\">Next: 2:30 PM</p>\n                    </div>\n                  </div>\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">Today's Schedule</h4>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Appointments</span>\n                        <span className=\"font-medium\">12/15</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div className=\"bg-blue-600 h-2 rounded-full\" style={{width: '80%'}}></div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Role Selection Cards */}\n      <section id=\"services\" className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">Choose Your Role</h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Access your personalized dashboard based on your role in the healthcare system\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {roles.map((role, index) => (\n              <RoleCard key={index} {...role} />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center mb-6\">\n                <Heart className=\"h-8 w-8 text-blue-400 mr-2\" />\n                <span className=\"text-xl font-bold\">HealthSensePlus</span>\n              </div>\n              <p className=\"text-gray-300 mb-6\">\n                Comprehensive healthcare management system designed to streamline patient care and improve medical outcomes.\n              </p>\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-semibold mb-6\">Quick Links</h3>\n              <ul className=\"space-y-3\">\n                <li><a href=\"#home\" className=\"text-gray-300 hover:text-white transition-colors\">Home</a></li>\n                <li><a href=\"#services\" className=\"text-gray-300 hover:text-white transition-colors\">Services</a></li>\n                <li><a href=\"/contact\" className=\"text-gray-300 hover:text-white transition-colors\">Contact</a></li>\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">Privacy Policy</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-semibold mb-6\">Services</h3>\n              <ul className=\"space-y-3\">\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">Patient Management</a></li>\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">Appointment Booking</a></li>\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">Medical Records</a></li>\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">Health Analytics</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-semibold mb-6\">Support</h3>\n              <ul className=\"space-y-3\">\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">Help Center</a></li>\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">Documentation</a></li>\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">System Status</a></li>\n                <li><a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">Security</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-800 mt-12 pt-8\">\n            <div className=\"flex flex-col md:flex-row justify-between items-center\">\n              <p className=\"text-gray-400 text-sm\">&copy; 2024 HealthSensePlus. All rights reserved.</p>\n              <div className=\"flex items-center space-x-6 mt-4 md:mt-0\">\n                <a href=\"#\" className=\"text-gray-400 hover:text-white text-sm transition-colors\">Terms of Service</a>\n                <a href=\"#\" className=\"text-gray-400 hover:text-white text-sm transition-colors\">Privacy Policy</a>\n                <a href=\"#\" className=\"text-gray-400 hover:text-white text-sm transition-colors\">HIPAA Compliance</a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":10068},"client/src/pages/login.jsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Heart, Mail, Lock, Eye, EyeOff } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  rememberMe: z.boolean().default(false),\n});\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n  \n  const form = useForm({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"token\", data.token);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      \n      toast({\n        title: \"Login Successful\",\n        description: `Welcome back, ${data.user.firstName}!`,\n      });\n\n      // Redirect based on selected role or user role\n      const selectedRole = localStorage.getItem('selectedRole') || data.user.role;\n      localStorage.removeItem('selectedRole');\n      \n      setLocation(`/dashboard/${selectedRole}`);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Heart className=\"h-8 w-8 text-blue-600 mr-2\" />\n            <span className=\"text-2xl font-bold text-gray-900\">HealthSensePlus</span>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Welcome Back</CardTitle>\n          <CardDescription>\n            Please sign in to your account to continue\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  className=\"pl-10\"\n                  {...form.register(\"email\")}\n                />\n              </div>\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.email.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter your password\"\n                  className=\"pl-10 pr-10\"\n                  {...form.register(\"password\")}\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-3 h-4 w-4 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff /> : <Eye />}\n                </button>\n              </div>\n              {form.formState.errors.password && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.password.message}</p>\n              )}\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"rememberMe\" \n                  {...form.register(\"rememberMe\")}\n                />\n                <Label htmlFor=\"rememberMe\" className=\"text-sm\">\n                  Remember me\n                </Label>\n              </div>\n              <a href=\"#\" className=\"text-sm text-blue-600 hover:text-blue-700\">\n                Forgot password?\n              </a>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-blue-600 hover:bg-blue-700\"\n              disabled={loginMutation.isPending}\n            >\n              {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Don't have an account?{\" \"}\n              <a href=\"#\" className=\"text-blue-600 hover:text-blue-700 font-medium\">\n                Contact your administrator\n              </a>\n            </p>\n          </div>\n\n          <div className=\"mt-4 text-center\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setLocation(\"/\")}\n              className=\"text-sm\"\n            >\n              ← Back to Home\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6117},"client/src/pages/medical-records.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\nimport Navbar from \"@/components/navbar\";\nimport MedicalRecordCard from \"@/components/medical-record-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { FileText, Search, Plus, User, Calendar, Upload, Activity, Pill, FlaskConical } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nconst medicalRecordSchema = z.object({\n  patientId: z.string().min(1, \"Patient ID is required\"),\n  visitDate: z.string().min(1, \"Visit date is required\"),\n  diagnosis: z.string().min(1, \"Diagnosis is required\"),\n  treatment: z.string().optional(),\n  notes: z.string().optional(),\n  prescription: z.string().optional(),\n  vitals: z.object({\n    bloodPressure: z.string().optional(),\n    heartRate: z.string().optional(),\n    temperature: z.string().optional(),\n    weight: z.string().optional(),\n  }).optional(),\n});\n\nexport default function MedicalRecords() {\n  const [, setLocation] = useLocation();\n  const [selectedPatient, setSelectedPatient] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isNewRecordOpen, setIsNewRecordOpen] = useState(false);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(medicalRecordSchema),\n    defaultValues: {\n      patientId: \"\",\n      visitDate: new Date().toISOString().split('T')[0],\n      diagnosis: \"\",\n      treatment: \"\",\n      notes: \"\",\n      prescription: \"\",\n      vitals: {\n        bloodPressure: \"\",\n        heartRate: \"\",\n        temperature: \"\",\n        weight: \"\",\n      },\n    },\n  });\n\n  const { data: patients = [] } = useQuery({\n    queryKey: [\"/api/users\", { role: \"patient\" }],\n    enabled: user?.role !== \"patient\",\n  });\n\n  const { data: medicalRecords = [], isLoading: recordsLoading } = useQuery({\n    queryKey: [\"/api/medical-records\", selectedPatient ? { patientId: selectedPatient.id } : null],\n    enabled: !!selectedPatient || user?.role === \"patient\",\n  });\n\n  const { data: healthMetrics = [] } = useQuery({\n    queryKey: [\"/api/health-metrics\", selectedPatient ? { patientId: selectedPatient.id } : null],\n    enabled: !!selectedPatient || user?.role === \"patient\",\n  });\n\n  const createRecordMutation = useMutation({\n    mutationFn: async (data) => {\n      const response = await apiRequest(\"POST\", \"/api/medical-records\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Medical Record Created\",\n        description: \"The medical record has been successfully created.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/medical-records\"] });\n      setIsNewRecordOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Create Record\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data) => {\n    const formattedData = {\n      ...data,\n      vitals: data.vitals,\n      prescription: data.prescription ? [{ medication: data.prescription }] : null,\n    };\n    createRecordMutation.mutate(formattedData);\n  };\n\n  const filteredPatients = patients.filter(patient =>\n    `${patient.firstName} ${patient.lastName}`.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const currentPatient = user?.role === \"patient\" ? user : selectedPatient;\n  const recentRecords = medicalRecords\n    .sort((a, b) => new Date(b.visitDate) - new Date(a.visitDate))\n    .slice(0, 5);\n\n  const mockMedications = [\n    { name: \"Lisinopril\", dosage: \"10mg daily\", prescribedBy: \"Dr. Wilson\", status: \"Active\" },\n    { name: \"Metformin\", dosage: \"500mg twice daily\", prescribedBy: \"Dr. Smith\", status: \"Active\" },\n    { name: \"Atorvastatin\", dosage: \"20mg daily\", prescribedBy: \"Dr. Wilson\", status: \"Active\" },\n  ];\n\n  const mockLabResults = [\n    { test: \"Cholesterol\", value: \"180 mg/dL\", range: \"< 200 mg/dL\", date: \"Dec 8, 2024\", status: \"Normal\" },\n    { test: \"Blood Sugar\", value: \"95 mg/dL\", range: \"70-100 mg/dL\", date: \"Dec 8, 2024\", status: \"Normal\" },\n    { test: \"Hemoglobin\", value: \"14.2 g/dL\", range: \"12-16 g/dL\", date: \"Dec 8, 2024\", status: \"Normal\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Medical Records</h1>\n              <p className=\"text-gray-600 mt-2\">Comprehensive patient health information</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              {user?.role !== \"patient\" && (\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search patients...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 w-64\"\n                  />\n                </div>\n              )}\n              {(user?.role === \"doctor\" || user?.role === \"nurse\") && (\n                <Dialog open={isNewRecordOpen} onOpenChange={setIsNewRecordOpen}>\n                  <DialogTrigger asChild>\n                    <Button className=\"bg-green-600 hover:bg-green-700\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      New Record\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle>Create New Medical Record</DialogTitle>\n                      <DialogDescription>\n                        Add a new medical record for a patient\n                      </DialogDescription>\n                    </DialogHeader>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"patientId\">Patient</Label>\n                          <Select onValueChange={(value) => form.setValue(\"patientId\", value)}>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select patient\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {patients.map((patient) => (\n                                <SelectItem key={patient.id} value={patient.id}>\n                                  {patient.firstName} {patient.lastName}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          {form.formState.errors.patientId && (\n                            <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.patientId.message}</p>\n                          )}\n                        </div>\n                        <div>\n                          <Label htmlFor=\"visitDate\">Visit Date</Label>\n                          <Input\n                            id=\"visitDate\"\n                            type=\"date\"\n                            {...form.register(\"visitDate\")}\n                          />\n                          {form.formState.errors.visitDate && (\n                            <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.visitDate.message}</p>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"diagnosis\">Diagnosis</Label>\n                        <Input\n                          id=\"diagnosis\"\n                          placeholder=\"Enter diagnosis\"\n                          {...form.register(\"diagnosis\")}\n                        />\n                        {form.formState.errors.diagnosis && (\n                          <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.diagnosis.message}</p>\n                        )}\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"treatment\">Treatment</Label>\n                        <Textarea\n                          id=\"treatment\"\n                          placeholder=\"Describe treatment plan\"\n                          {...form.register(\"treatment\")}\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"bloodPressure\">Blood Pressure</Label>\n                          <Input\n                            id=\"bloodPressure\"\n                            placeholder=\"120/80\"\n                            {...form.register(\"vitals.bloodPressure\")}\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"heartRate\">Heart Rate</Label>\n                          <Input\n                            id=\"heartRate\"\n                            placeholder=\"72\"\n                            {...form.register(\"vitals.heartRate\")}\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"temperature\">Temperature</Label>\n                          <Input\n                            id=\"temperature\"\n                            placeholder=\"98.6\"\n                            {...form.register(\"vitals.temperature\")}\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"weight\">Weight</Label>\n                          <Input\n                            id=\"weight\"\n                            placeholder=\"150 lbs\"\n                            {...form.register(\"vitals.weight\")}\n                          />\n                        </div>\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"prescription\">Prescription</Label>\n                        <Textarea\n                          id=\"prescription\"\n                          placeholder=\"List medications and dosages\"\n                          {...form.register(\"prescription\")}\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"notes\">Additional Notes</Label>\n                        <Textarea\n                          id=\"notes\"\n                          placeholder=\"Additional notes and observations\"\n                          {...form.register(\"notes\")}\n                        />\n                      </div>\n\n                      <div className=\"flex justify-end space-x-4\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setIsNewRecordOpen(false)}>\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" disabled={createRecordMutation.isPending}>\n                          {createRecordMutation.isPending ? \"Creating...\" : \"Create Record\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Patient Selection/Info Sidebar */}\n          <div className=\"lg:col-span-1\">\n            {user?.role === \"patient\" ? (\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"text-center mb-6\">\n                    <div className=\"w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <User className=\"h-8 w-8 text-blue-600\" />\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">\n                      {user.firstName} {user.lastName}\n                    </h3>\n                    <p className=\"text-sm text-gray-600\">Patient ID: #{user.id.slice(-6)}</p>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-500\">Date of Birth</label>\n                      <p className=\"text-sm text-gray-900\">{user.dateOfBirth || \"Not specified\"}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-500\">Gender</label>\n                      <p className=\"text-sm text-gray-900\">{user.gender || \"Not specified\"}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-500\">Phone</label>\n                      <p className=\"text-sm text-gray-900\">{user.phone || \"Not specified\"}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Patients</CardTitle>\n                  <CardDescription>Select a patient to view records</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                    {filteredPatients.map((patient) => (\n                      <div\n                        key={patient.id}\n                        className={`p-3 rounded-lg cursor-pointer transition-colors ${\n                          selectedPatient?.id === patient.id\n                            ? \"bg-blue-100 border-blue-200 border\"\n                            : \"hover:bg-gray-100\"\n                        }`}\n                        onClick={() => setSelectedPatient(patient)}\n                      >\n                        <div className=\"flex items-center\">\n                          <div className=\"w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center\">\n                            <User className=\"h-4 w-4 text-gray-600\" />\n                          </div>\n                          <div className=\"ml-3\">\n                            <p className=\"text-sm font-medium text-gray-900\">\n                              {patient.firstName} {patient.lastName}\n                            </p>\n                            <p className=\"text-xs text-gray-600\">ID: #{patient.id.slice(-6)}</p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Medical Records Content */}\n          <div className=\"lg:col-span-3\">\n            {currentPatient ? (\n              <Tabs defaultValue=\"records\" className=\"space-y-6\">\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"records\" className=\"flex items-center\">\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    Records\n                  </TabsTrigger>\n                  <TabsTrigger value=\"medications\" className=\"flex items-center\">\n                    <Pill className=\"h-4 w-4 mr-2\" />\n                    Medications\n                  </TabsTrigger>\n                  <TabsTrigger value=\"labs\" className=\"flex items-center\">\n                    <FlaskConical className=\"h-4 w-4 mr-2\" />\n                    Lab Results\n                  </TabsTrigger>\n                  <TabsTrigger value=\"vitals\" className=\"flex items-center\">\n                    <Activity className=\"h-4 w-4 mr-2\" />\n                    Vitals\n                  </TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"records\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Medical Records</CardTitle>\n                      <CardDescription>Complete medical history and visit records</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      {recordsLoading ? (\n                        <div className=\"space-y-4\">\n                          {[...Array(3)].map((_, i) => (\n                            <div key={i} className=\"animate-pulse bg-gray-200 h-24 rounded-lg\"></div>\n                          ))}\n                        </div>\n                      ) : recentRecords.length > 0 ? (\n                        <div className=\"space-y-4\">\n                          {recentRecords.map((record) => (\n                            <MedicalRecordCard key={record.id} record={record} />\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-12\">\n                          <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                          <p className=\"text-gray-500\">No medical records found</p>\n                          {(user?.role === \"doctor\" || user?.role === \"nurse\") && (\n                            <Button \n                              className=\"mt-4\" \n                              onClick={() => setIsNewRecordOpen(true)}\n                            >\n                              Create First Record\n                            </Button>\n                          )}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"medications\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Current Medications</CardTitle>\n                      <CardDescription>Active prescriptions and medications</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {mockMedications.map((medication, index) => (\n                          <div key={index} className=\"border border-gray-200 rounded-lg p-4\">\n                            <div className=\"flex items-start justify-between\">\n                              <div>\n                                <h4 className=\"font-medium text-gray-900\">{medication.name}</h4>\n                                <p className=\"text-sm text-gray-600\">{medication.dosage}</p>\n                                <p className=\"text-xs text-gray-500\">Prescribed by {medication.prescribedBy}</p>\n                              </div>\n                              <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                                {medication.status}\n                              </span>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"labs\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Laboratory Results</CardTitle>\n                      <CardDescription>Recent lab tests and results</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"overflow-x-auto\">\n                        <table className=\"min-w-full divide-y divide-gray-200\">\n                          <thead className=\"bg-gray-50\">\n                            <tr>\n                              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Test</th>\n                              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Result</th>\n                              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Range</th>\n                              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Date</th>\n                              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                            </tr>\n                          </thead>\n                          <tbody className=\"bg-white divide-y divide-gray-200\">\n                            {mockLabResults.map((result, index) => (\n                              <tr key={index}>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                                  {result.test}\n                                </td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                                  {result.value}\n                                </td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                  {result.range}\n                                </td>\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                  {result.date}\n                                </td>\n                                <td className=\"px-6 py-4 whitespace-nowrap\">\n                                  <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                                    {result.status}\n                                  </span>\n                                </td>\n                              </tr>\n                            ))}\n                          </tbody>\n                        </table>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"vitals\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Vital Signs</CardTitle>\n                      <CardDescription>Recent vital sign measurements</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      {healthMetrics.length > 0 ? (\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                          {healthMetrics[0].bloodPressure && (\n                            <div className=\"bg-red-50 rounded-lg p-4\">\n                              <h4 className=\"font-medium text-gray-900\">Blood Pressure</h4>\n                              <p className=\"text-2xl font-bold text-red-600\">{healthMetrics[0].bloodPressure}</p>\n                              <p className=\"text-sm text-gray-500\">mmHg</p>\n                            </div>\n                          )}\n                          {healthMetrics[0].heartRate && (\n                            <div className=\"bg-pink-50 rounded-lg p-4\">\n                              <h4 className=\"font-medium text-gray-900\">Heart Rate</h4>\n                              <p className=\"text-2xl font-bold text-pink-600\">{healthMetrics[0].heartRate}</p>\n                              <p className=\"text-sm text-gray-500\">bpm</p>\n                            </div>\n                          )}\n                          {healthMetrics[0].temperature && (\n                            <div className=\"bg-orange-50 rounded-lg p-4\">\n                              <h4 className=\"font-medium text-gray-900\">Temperature</h4>\n                              <p className=\"text-2xl font-bold text-orange-600\">{healthMetrics[0].temperature}</p>\n                              <p className=\"text-sm text-gray-500\">°F</p>\n                            </div>\n                          )}\n                          {healthMetrics[0].weight && (\n                            <div className=\"bg-blue-50 rounded-lg p-4\">\n                              <h4 className=\"font-medium text-gray-900\">Weight</h4>\n                              <p className=\"text-2xl font-bold text-blue-600\">{healthMetrics[0].weight}</p>\n                              <p className=\"text-sm text-gray-500\">lbs</p>\n                            </div>\n                          )}\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-12\">\n                          <Activity className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                          <p className=\"text-gray-500\">No vital signs recorded</p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            ) : (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <User className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">\n                    {user?.role === \"patient\" \n                      ? \"Loading your medical records...\" \n                      : \"Select a patient to view their medical records\"\n                    }\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":26342},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/nurse-dashboard.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Navbar from \"@/components/navbar\";\nimport StatCard from \"@/components/stat-card\";\nimport { Users, Activity, Pills, ClipboardCheck, Calendar, UserPlus, FileText, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\n\nexport default function NurseDashboard() {\n  const [, setLocation] = useLocation();\n  const user = JSON.parse(localStorage.getItem(\"user\") || \"{}\");\n\n  const { data: appointments = [] } = useQuery({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\", { role: \"patient\" }],\n  });\n\n  const getGreeting = () => {\n    return `Welcome back, ${user.firstName} ${user.lastName}`;\n  };\n\n  const today = new Date().toISOString().split('T')[0];\n  const todayAppointments = appointments.filter(apt => apt.appointmentDate === today);\n  const assignedPatients = users.slice(0, 8); // Mock assigned patients\n\n  const vitalsToRecord = assignedPatients.filter((_, index) => index % 3 === 0); // Mock patients needing vitals\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Nurse Dashboard</h1>\n              <p className=\"text-gray-600 mt-2\">{getGreeting()}</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" className=\"flex items-center\">\n                <Calendar className=\"h-4 w-4 mr-2\" />\n                Schedule\n              </Button>\n              <Button \n                className=\"bg-purple-600 hover:bg-purple-700 flex items-center\"\n                onClick={() => setLocation(\"/medical-records\")}\n              >\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Record Vitals\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Nurse Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <StatCard\n            title=\"Assigned Patients\"\n            value={assignedPatients.length.toString()}\n            icon={Users}\n            color=\"blue\"\n          />\n          \n          <StatCard\n            title=\"Vitals to Record\"\n            value={vitalsToRecord.length.toString()}\n            icon={Activity}\n            color=\"green\"\n          />\n          \n          <StatCard\n            title=\"Medications Due\"\n            value=\"12\"\n            icon={Pills}\n            color=\"orange\"\n          />\n          \n          <StatCard\n            title=\"Tasks Completed\"\n            value=\"8/10\"\n            icon={ClipboardCheck}\n            color=\"purple\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Patient Care Tasks */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <ClipboardCheck className=\"h-5 w-5 mr-2\" />\n                  Today's Care Tasks\n                </CardTitle>\n                <CardDescription>\n                  Patient care activities scheduled for today\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {vitalsToRecord.map((patient, index) => (\n                    <div key={patient.id} className=\"appointment-card rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n                            <Users className=\"h-5 w-5 text-purple-600\" />\n                          </div>\n                          <div className=\"ml-4\">\n                            <h4 className=\"font-medium text-gray-900\">\n                              {patient.firstName} {patient.lastName}\n                            </h4>\n                            <p className=\"text-sm text-gray-600\">\n                              {index === 0 ? \"Vital signs check\" : index === 1 ? \"Medication administration\" : \"Post-op monitoring\"}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-sm font-medium text-gray-900\">\n                            {index === 0 ? \"09:00 AM\" : index === 1 ? \"10:30 AM\" : \"02:00 PM\"}\n                          </p>\n                          <p className=\"text-sm text-gray-600\">Room {100 + index}</p>\n                        </div>\n                      </div>\n                      <div className=\"mt-4 flex items-center justify-between\">\n                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                          index === 0 ? \"bg-red-100 text-red-800\" : index === 1 ? \"bg-yellow-100 text-yellow-800\" : \"bg-blue-100 text-blue-800\"\n                        }`}>\n                          {index === 0 ? \"Urgent\" : index === 1 ? \"Due Soon\" : \"Scheduled\"}\n                        </span>\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            size=\"sm\" \n                            className=\"bg-green-600 hover:bg-green-700 text-xs\"\n                          >\n                            Complete Task\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            className=\"text-blue-600 hover:text-blue-700 text-xs\"\n                            onClick={() => setLocation(\"/medical-records\")}\n                          >\n                            View Chart\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {vitalsToRecord.length === 0 && (\n                    <div className=\"text-center py-8\">\n                      <ClipboardCheck className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500\">All tasks completed for today</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Assigned Patients & Quick Actions */}\n          <div className=\"space-y-6\">\n            {/* Assigned Patients */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Users className=\"h-5 w-5 mr-2\" />\n                  Assigned Patients\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {assignedPatients.slice(0, 4).map((patient, index) => (\n                    <div key={patient.id} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center\">\n                          <Users className=\"h-4 w-4 text-gray-600\" />\n                        </div>\n                        <div className=\"ml-3\">\n                          <p className=\"text-sm font-medium text-gray-900\">\n                            {patient.firstName} {patient.lastName}\n                          </p>\n                          <p className=\"text-xs text-gray-600\">\n                            Room {100 + index} • {index % 2 === 0 ? \"Stable\" : \"Monitoring\"}\n                          </p>\n                        </div>\n                      </div>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        className=\"text-blue-600 hover:text-blue-700 text-xs\"\n                        onClick={() => setLocation(\"/medical-records\")}\n                      >\n                        View\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start bg-blue-50 text-blue-700 hover:bg-blue-100\"\n                  >\n                    <Activity className=\"h-4 w-4 mr-3\" />\n                    Record Vital Signs\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start bg-green-50 text-green-700 hover:bg-green-100\"\n                  >\n                    <Pills className=\"h-4 w-4 mr-3\" />\n                    Medication Schedule\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start bg-orange-50 text-orange-700 hover:bg-orange-100\"\n                    onClick={() => setLocation(\"/medical-records\")}\n                  >\n                    <FileText className=\"h-4 w-4 mr-3\" />\n                    Update Patient Records\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Emergency Contacts */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Heart className=\"h-5 w-5 mr-2\" />\n                  Emergency Contacts\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Code Blue</span>\n                    <span className=\"text-sm font-medium text-red-600\">5555</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Security</span>\n                    <span className=\"text-sm font-medium text-gray-900\">5911</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Pharmacy</span>\n                    <span className=\"text-sm font-medium text-gray-900\">5123</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Lab</span>\n                    <span className=\"text-sm font-medium text-gray-900\">5456</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11426},"client/src/pages/patient-dashboard.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Navbar from \"@/components/navbar\";\nimport StatCard from \"@/components/stat-card\";\nimport AppointmentCard from \"@/components/appointment-card\";\nimport { Calendar, Pills, FlaskConical, Heart, Bell, CalendarPlus, FileText, Activity } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\n\nexport default function PatientDashboard() {\n  const [, setLocation] = useLocation();\n  const user = JSON.parse(localStorage.getItem(\"user\") || \"{}\");\n\n  const { data: appointments = [], isLoading: appointmentsLoading } = useQuery({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const { data: healthMetrics = [], isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/health-metrics\"],\n  });\n\n  const getGreeting = () => {\n    const hour = new Date().getHours();\n    const greeting = hour < 12 ? \"Good morning\" : hour < 18 ? \"Good afternoon\" : \"Good evening\";\n    return `${greeting}, ${user.firstName} ${user.lastName}`;\n  };\n\n  const upcomingAppointments = appointments\n    .filter(apt => new Date(apt.appointmentDate) >= new Date())\n    .sort((a, b) => new Date(a.appointmentDate) - new Date(b.appointmentDate));\n\n  const nextAppointment = upcomingAppointments[0];\n  const recentAppointments = appointments\n    .filter(apt => new Date(apt.appointmentDate) < new Date())\n    .sort((a, b) => new Date(b.appointmentDate) - new Date(a.appointmentDate))\n    .slice(0, 5);\n\n  const currentMetrics = healthMetrics[0] || {};\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Patient Dashboard</h1>\n              <p className=\"text-gray-600 mt-2\">{getGreeting()}</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" className=\"flex items-center\">\n                <Bell className=\"h-4 w-4 mr-2\" />\n                Notifications\n              </Button>\n              <Button \n                className=\"bg-blue-600 hover:bg-blue-700 flex items-center\"\n                onClick={() => setLocation(\"/appointments\")}\n              >\n                <CalendarPlus className=\"h-4 w-4 mr-2\" />\n                Book Appointment\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <StatCard\n            title=\"Next Appointment\"\n            value={nextAppointment ? new Date(nextAppointment.appointmentDate).toLocaleDateString() : \"None\"}\n            icon={Calendar}\n            color=\"blue\"\n          />\n          \n          <StatCard\n            title=\"Prescriptions\"\n            value=\"3 Active\"\n            icon={Pills}\n            color=\"green\"\n          />\n          \n          <StatCard\n            title=\"Lab Results\"\n            value=\"2 New\"\n            icon={FlaskConical}\n            color=\"orange\"\n          />\n          \n          <StatCard\n            title=\"Health Score\"\n            value=\"85/100\"\n            icon={Heart}\n            color=\"purple\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Recent Appointments */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"h-5 w-5 mr-2\" />\n                  Recent Appointments\n                </CardTitle>\n                <CardDescription>\n                  Your appointment history and upcoming visits\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {appointmentsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"animate-pulse bg-gray-200 h-20 rounded-lg\"></div>\n                    ))}\n                  </div>\n                ) : recentAppointments.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {recentAppointments.map((appointment) => (\n                      <AppointmentCard key={appointment.id} appointment={appointment} />\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">No recent appointments</p>\n                    <Button \n                      className=\"mt-4\" \n                      onClick={() => setLocation(\"/appointments\")}\n                    >\n                      Book Your First Appointment\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Health Metrics & Quick Actions */}\n          <div className=\"space-y-6\">\n            {/* Health Metrics */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Activity className=\"h-5 w-5 mr-2\" />\n                  Health Metrics\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {metricsLoading ? (\n                  <div className=\"space-y-3\">\n                    {[...Array(4)].map((_, i) => (\n                      <div key={i} className=\"animate-pulse bg-gray-200 h-6 rounded\"></div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600\">Blood Pressure</span>\n                      <span className=\"text-sm font-medium text-gray-900\">\n                        {currentMetrics.bloodPressure || \"120/80\"}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600\">Heart Rate</span>\n                      <span className=\"text-sm font-medium text-gray-900\">\n                        {currentMetrics.heartRate || \"72\"} bpm\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600\">Weight</span>\n                      <span className=\"text-sm font-medium text-gray-900\">\n                        {currentMetrics.weight || \"150\"} lbs\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600\">Temperature</span>\n                      <span className=\"text-sm font-medium text-gray-900\">\n                        {currentMetrics.temperature || \"98.6\"}°F\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start bg-blue-50 text-blue-700 hover:bg-blue-100\"\n                    onClick={() => setLocation(\"/appointments\")}\n                  >\n                    <CalendarPlus className=\"h-4 w-4 mr-3\" />\n                    Book New Appointment\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start bg-green-50 text-green-700 hover:bg-green-100\"\n                    onClick={() => setLocation(\"/medical-records\")}\n                  >\n                    <FileText className=\"h-4 w-4 mr-3\" />\n                    View Medical Records\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start bg-orange-50 text-orange-700 hover:bg-orange-100\"\n                  >\n                    <Pills className=\"h-4 w-4 mr-3\" />\n                    Manage Prescriptions\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8861},"client/src/utils/constants.js":{"content":"export const USER_ROLES = {\n  PATIENT: 'patient',\n  DOCTOR: 'doctor',\n  ADMIN: 'admin',\n  NURSE: 'nurse',\n};\n\nexport const APPOINTMENT_STATUS = {\n  SCHEDULED: 'scheduled',\n  COMPLETED: 'completed',\n  CANCELLED: 'cancelled',\n  RESCHEDULED: 'rescheduled',\n};\n\nexport const COLORS = {\n  MEDICAL_BLUE: {\n    50: 'hsl(214, 100%, 97%)',\n    100: 'hsl(214, 95%, 93%)', \n    500: 'hsl(213, 83%, 50%)',\n    600: 'hsl(213, 83%, 45%)',\n    700: 'hsl(213, 75%, 40%)',\n  },\n  HEALING_GREEN: {\n    50: 'hsl(151, 81%, 96%)',\n    100: 'hsl(149, 80%, 90%)',\n    500: 'hsl(158, 94%, 40%)',\n    600: 'hsl(158, 94%, 35%)',\n    700: 'hsl(158, 94%, 30%)',\n  },\n  HEALTHCARE_ORANGE: {\n    50: 'hsl(48, 100%, 93%)',\n    100: 'hsl(48, 96%, 89%)',\n    400: 'hsl(43, 96%, 66%)',\n    500: 'hsl(43, 96%, 56%)',\n    600: 'hsl(36, 95%, 50%)',\n  },\n};\n\nexport const CONTACT_SUBJECTS = [\n  { value: 'general', label: 'General Inquiry' },\n  { value: 'technical', label: 'Technical Support' },\n  { value: 'appointment', label: 'Appointment Issue' },\n  { value: 'billing', label: 'Billing Question' },\n  { value: 'feature', label: 'Feature Request' },\n];\n\nexport const INSURANCE_PROVIDERS = [\n  { value: 'blue-cross', label: 'Blue Cross Blue Shield' },\n  { value: 'aetna', label: 'Aetna' },\n  { value: 'cigna', label: 'Cigna' },\n  { value: 'self-pay', label: 'Self-Pay' },\n];\n\nexport const APPOINTMENT_REASONS = [\n  { value: 'routine-checkup', label: 'Routine Checkup' },\n  { value: 'follow-up', label: 'Follow-up' },\n  { value: 'new-patient', label: 'New Patient' },\n  { value: 'urgent-care', label: 'Urgent Care' },\n  { value: 'consultation', label: 'Consultation' },\n];\n\nexport const SPECIALIZATIONS = [\n  'Cardiology',\n  'Dermatology', \n  'Endocrinology',\n  'Family Medicine',\n  'Internal Medicine',\n  'Neurology',\n  'Oncology',\n  'Orthopedics',\n  'Pediatrics',\n  'Psychiatry',\n  'Radiology',\n  'Surgery',\n];\n\nexport const API_ENDPOINTS = {\n  AUTH: {\n    LOGIN: '/api/auth/login',\n    REGISTER: '/api/auth/register',\n    PROFILE: '/api/users/profile',\n  },\n  USERS: '/api/users',\n  APPOINTMENTS: '/api/appointments',\n  MEDICAL_RECORDS: '/api/medical-records',\n  HEALTH_METRICS: '/api/health-metrics',\n  CONTACT: '/api/contact',\n  FEEDBACK: '/api/feedback',\n  ANALYTICS: '/api/analytics/dashboard-stats',\n};\n\nexport const EMERGENCY_CONTACTS = {\n  EMERGENCY: '(555) 911-1234',\n  GENERAL: '(555) 123-4567',\n  EMAIL: 'info@healthsenseplus.com',\n  SUPPORT_EMAIL: 'support@healthsenseplus.com',\n};\n\nexport const OFFICE_HOURS = {\n  WEEKDAYS: 'Monday - Friday: 8:00 AM - 6:00 PM',\n  SATURDAY: 'Saturday: 9:00 AM - 4:00 PM', \n  SUNDAY: 'Sunday: Emergency Only',\n};\n","size_bytes":2624},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}